import { z } from "zod";
export default z.object({ "payloadType": z.string().min(1).max(128).describe("Enumerated or private string signifying the nature of values."), "readingType": z.string().nullable().describe("Enumerated or private string signifying the type of reading.").default(null), "units": z.string().nullable().describe("Units of measure.").default(null), "targets": z.array(z.object({ "type": z.string().min(1).max(128).describe("Enumerated or private string signifying the nature of values.\nE.G. \"PRICE\" indicates value is to be interpreted as a currency.\n"), "values": z.array(z.union([z.number(), z.number().int(), z.string(), z.boolean(), z.object({ "x": z.number().nullable().describe("A value on an x axis.").default(null), "y": z.number().nullable().describe("A value on a y axis.").default(null) }).describe("A pair of floats typically used as a point on a 2 dimensional grid.")])).describe("A list of data points. Most often a singular value such as a price.") }).describe("Represents one or more values associated with a type.\nE.g. a type of PRICE contains a single float value.\n")).nullable().describe("A list of valuesMap objects.").default(null), "aggregate": z.boolean().describe("True if report should aggregate results from all targeted resources.\nFalse if report includes results for each resource.\n").default(false), "startInterval": z.number().int().describe("The interval on which to generate a report.\n-1 indicates generate report at end of last interval.\n").default(-1), "numIntervals": z.number().int().describe("The number of intervals to include in a report.\n-1 indicates that all intervals are to be included.\n").default(-1), "historical": z.boolean().describe("True indicates report on intervals preceding startInterval.\nFalse indicates report on intervals following startInterval (e.g. forecast).\n").default(true), "frequency": z.number().int().describe("Number of intervals that elapse between reports.\n-1 indicates same as numIntervals.\n").default(-1), "repeat": z.number().int().describe("Number of times to repeat report.\n1 indicates generate one report.\n-1 indicates repeat indefinitely.\n").default(1) }).describe("An object that may be used to request a report from a VEN.\nSee OpenADR REST User Guide for detailed description of how configure a report request.\n");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9kLXJlcG9ydERlc2NyaXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvem9kL3pvZC1yZXBvcnREZXNjcmlwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFFeEIsZUFBZSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQywrREFBK0QsQ0FBQyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLDhEQUE4RCxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLHFJQUFxSSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxxRUFBcUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxxRUFBcUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsOEdBQThHLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyw2SEFBNkgsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxzR0FBc0csQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLHdHQUF3RyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsNklBQTZJLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsd0ZBQXdGLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQywwR0FBMEcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLHVKQUF1SixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuXG5leHBvcnQgZGVmYXVsdCB6Lm9iamVjdCh7IFwicGF5bG9hZFR5cGVcIjogei5zdHJpbmcoKS5taW4oMSkubWF4KDEyOCkuZGVzY3JpYmUoXCJFbnVtZXJhdGVkIG9yIHByaXZhdGUgc3RyaW5nIHNpZ25pZnlpbmcgdGhlIG5hdHVyZSBvZiB2YWx1ZXMuXCIpLCBcInJlYWRpbmdUeXBlXCI6IHouc3RyaW5nKCkubnVsbGFibGUoKS5kZXNjcmliZShcIkVudW1lcmF0ZWQgb3IgcHJpdmF0ZSBzdHJpbmcgc2lnbmlmeWluZyB0aGUgdHlwZSBvZiByZWFkaW5nLlwiKS5kZWZhdWx0KG51bGwpLCBcInVuaXRzXCI6IHouc3RyaW5nKCkubnVsbGFibGUoKS5kZXNjcmliZShcIlVuaXRzIG9mIG1lYXN1cmUuXCIpLmRlZmF1bHQobnVsbCksIFwidGFyZ2V0c1wiOiB6LmFycmF5KHoub2JqZWN0KHsgXCJ0eXBlXCI6IHouc3RyaW5nKCkubWluKDEpLm1heCgxMjgpLmRlc2NyaWJlKFwiRW51bWVyYXRlZCBvciBwcml2YXRlIHN0cmluZyBzaWduaWZ5aW5nIHRoZSBuYXR1cmUgb2YgdmFsdWVzLlxcbkUuRy4gXFxcIlBSSUNFXFxcIiBpbmRpY2F0ZXMgdmFsdWUgaXMgdG8gYmUgaW50ZXJwcmV0ZWQgYXMgYSBjdXJyZW5jeS5cXG5cIiksIFwidmFsdWVzXCI6IHouYXJyYXkoei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKS5pbnQoKSwgei5zdHJpbmcoKSwgei5ib29sZWFuKCksIHoub2JqZWN0KHsgXCJ4XCI6IHoubnVtYmVyKCkubnVsbGFibGUoKS5kZXNjcmliZShcIkEgdmFsdWUgb24gYW4geCBheGlzLlwiKS5kZWZhdWx0KG51bGwpLCBcInlcIjogei5udW1iZXIoKS5udWxsYWJsZSgpLmRlc2NyaWJlKFwiQSB2YWx1ZSBvbiBhIHkgYXhpcy5cIikuZGVmYXVsdChudWxsKSB9KS5kZXNjcmliZShcIkEgcGFpciBvZiBmbG9hdHMgdHlwaWNhbGx5IHVzZWQgYXMgYSBwb2ludCBvbiBhIDIgZGltZW5zaW9uYWwgZ3JpZC5cIildKSkuZGVzY3JpYmUoXCJBIGxpc3Qgb2YgZGF0YSBwb2ludHMuIE1vc3Qgb2Z0ZW4gYSBzaW5ndWxhciB2YWx1ZSBzdWNoIGFzIGEgcHJpY2UuXCIpIH0pLmRlc2NyaWJlKFwiUmVwcmVzZW50cyBvbmUgb3IgbW9yZSB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIGEgdHlwZS5cXG5FLmcuIGEgdHlwZSBvZiBQUklDRSBjb250YWlucyBhIHNpbmdsZSBmbG9hdCB2YWx1ZS5cXG5cIikpLm51bGxhYmxlKCkuZGVzY3JpYmUoXCJBIGxpc3Qgb2YgdmFsdWVzTWFwIG9iamVjdHMuXCIpLmRlZmF1bHQobnVsbCksIFwiYWdncmVnYXRlXCI6IHouYm9vbGVhbigpLmRlc2NyaWJlKFwiVHJ1ZSBpZiByZXBvcnQgc2hvdWxkIGFnZ3JlZ2F0ZSByZXN1bHRzIGZyb20gYWxsIHRhcmdldGVkIHJlc291cmNlcy5cXG5GYWxzZSBpZiByZXBvcnQgaW5jbHVkZXMgcmVzdWx0cyBmb3IgZWFjaCByZXNvdXJjZS5cXG5cIikuZGVmYXVsdChmYWxzZSksIFwic3RhcnRJbnRlcnZhbFwiOiB6Lm51bWJlcigpLmludCgpLmRlc2NyaWJlKFwiVGhlIGludGVydmFsIG9uIHdoaWNoIHRvIGdlbmVyYXRlIGEgcmVwb3J0Llxcbi0xIGluZGljYXRlcyBnZW5lcmF0ZSByZXBvcnQgYXQgZW5kIG9mIGxhc3QgaW50ZXJ2YWwuXFxuXCIpLmRlZmF1bHQoLTEpLCBcIm51bUludGVydmFsc1wiOiB6Lm51bWJlcigpLmludCgpLmRlc2NyaWJlKFwiVGhlIG51bWJlciBvZiBpbnRlcnZhbHMgdG8gaW5jbHVkZSBpbiBhIHJlcG9ydC5cXG4tMSBpbmRpY2F0ZXMgdGhhdCBhbGwgaW50ZXJ2YWxzIGFyZSB0byBiZSBpbmNsdWRlZC5cXG5cIikuZGVmYXVsdCgtMSksIFwiaGlzdG9yaWNhbFwiOiB6LmJvb2xlYW4oKS5kZXNjcmliZShcIlRydWUgaW5kaWNhdGVzIHJlcG9ydCBvbiBpbnRlcnZhbHMgcHJlY2VkaW5nIHN0YXJ0SW50ZXJ2YWwuXFxuRmFsc2UgaW5kaWNhdGVzIHJlcG9ydCBvbiBpbnRlcnZhbHMgZm9sbG93aW5nIHN0YXJ0SW50ZXJ2YWwgKGUuZy4gZm9yZWNhc3QpLlxcblwiKS5kZWZhdWx0KHRydWUpLCBcImZyZXF1ZW5jeVwiOiB6Lm51bWJlcigpLmludCgpLmRlc2NyaWJlKFwiTnVtYmVyIG9mIGludGVydmFscyB0aGF0IGVsYXBzZSBiZXR3ZWVuIHJlcG9ydHMuXFxuLTEgaW5kaWNhdGVzIHNhbWUgYXMgbnVtSW50ZXJ2YWxzLlxcblwiKS5kZWZhdWx0KC0xKSwgXCJyZXBlYXRcIjogei5udW1iZXIoKS5pbnQoKS5kZXNjcmliZShcIk51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgcmVwb3J0LlxcbjEgaW5kaWNhdGVzIGdlbmVyYXRlIG9uZSByZXBvcnQuXFxuLTEgaW5kaWNhdGVzIHJlcGVhdCBpbmRlZmluaXRlbHkuXFxuXCIpLmRlZmF1bHQoMSkgfSkuZGVzY3JpYmUoXCJBbiBvYmplY3QgdGhhdCBtYXkgYmUgdXNlZCB0byByZXF1ZXN0IGEgcmVwb3J0IGZyb20gYSBWRU4uXFxuU2VlIE9wZW5BRFIgUkVTVCBVc2VyIEd1aWRlIGZvciBkZXRhaWxlZCBkZXNjcmlwdGlvbiBvZiBob3cgY29uZmlndXJlIGEgcmVwb3J0IHJlcXVlc3QuXFxuXCIpO1xuIl19