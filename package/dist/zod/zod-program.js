import { z } from "zod";
export default z.object({ "id": z.string().regex(new RegExp("^[a-zA-Z0-9_-]*$")).min(1).max(128).describe("URL safe VTN assigned object ID.").optional(), "createdDateTime": z.string().datetime().describe("datetime in ISO 8601 format").optional(), "modificationDateTime": z.string().datetime().describe("datetime in ISO 8601 format").optional(), "objectType": z.literal("PROGRAM").describe("Used as discriminator").optional(), "programName": z.string().min(1).max(128).describe("Short name to uniquely identify program."), "programLongName": z.string().nullable().describe("Long name of program for human readability.").default(null), "retailerName": z.string().nullable().describe("Short name of energy retailer providing the program.").default(null), "retailerLongName": z.string().nullable().describe("Long name of energy retailer for human readability.").default(null), "programType": z.string().nullable().describe("A program defined categorization.").default(null), "country": z.string().nullable().describe("Alpha-2 code per ISO 3166-1.").default(null), "principalSubdivision": z.string().nullable().describe("Coding per ISO 3166-2. E.g. state in US.").default(null), "timeZoneOffset": z.string().regex(new RegExp("^(-?)P(?=\\d|T\\d)(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)([DW]))?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$")).describe("duration in ISO 8601 format").default("PT0S"), "intervalPeriod": z.object({ "start": z.string().datetime().describe("datetime in ISO 8601 format"), "duration": z.string().regex(new RegExp("^(-?)P(?=\\d|T\\d)(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)([DW]))?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$")).describe("duration in ISO 8601 format").default("PT0S"), "randomizeStart": z.string().regex(new RegExp("^(-?)P(?=\\d|T\\d)(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)([DW]))?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$")).describe("duration in ISO 8601 format").default("PT0S") }).describe("Defines temporal aspects of intervals.\nA duration of default PT0S indicates instantaneous or infinity, depending on payloadType.\nA randomizeStart of default null indicates no randomization.\n").optional(), "programDescriptions": z.array(z.any()).nullable().describe("A list of programDescriptions").default(null), "bindingEvents": z.boolean().nullable().describe("True if events are fixed once transmitted.").default(null), "localPrice": z.boolean().nullable().describe("True if events have been adapted from a grid event.").default(null), "payloadDescriptors": z.array(z.union([z.object({ "objectType": z.literal("EVENT_PAYLOAD_DESCRIPTOR").describe("Used as discriminator.").optional(), "payloadType": z.string().min(1).max(128).describe("Enumerated or private string signifying the nature of values."), "units": z.string().nullable().describe("Units of measure.").default(null), "currency": z.string().nullable().describe("Currency of price payload.").default(null) }).describe("Contextual information used to interpret event valuesMap values.\nE.g. a PRICE payload simply contains a price value, an\nassociated descriptor provides necessary context such as units and currency.\n"), z.object({ "objectType": z.literal("REPORT_PAYLOAD_DESCRIPTOR").describe("Used as discriminator.").optional(), "payloadType": z.string().min(1).max(128).describe("Enumerated or private string signifying the nature of values."), "readingType": z.string().nullable().describe("Enumerated or private string signifying the type of reading.").default(null), "units": z.string().nullable().describe("Units of measure.").default(null), "accuracy": z.number().nullable().describe("A quantification of the accuracy of a set of payload values.").default(null), "confidence": z.number().int().gte(0).lte(100).nullable().describe("A quantification of the confidence in a set of payload values.").default(null) }).describe("Contextual information used to interpret report payload values.\nE.g. a USAGE payload simply contains a usage value, an\nassociated descriptor provides necessary context such as units and data quality.\n")])).nullable().describe("A list of payloadDescriptors.").default(null), "targets": z.array(z.object({ "type": z.string().min(1).max(128).describe("Enumerated or private string signifying the nature of values.\nE.G. \"PRICE\" indicates value is to be interpreted as a currency.\n"), "values": z.array(z.union([z.number(), z.number().int(), z.string(), z.boolean(), z.object({ "x": z.number().describe("A value on an x axis."), "y": z.number().describe("A value on a y axis.") }).describe("A pair of floats typically used as a point on a 2 dimensional grid.")])).describe("A list of data points. Most often a singular value such as a price.") }).describe("Represents one or more values associated with a type.\nE.g. a type of PRICE contains a single float value.\n")).nullable().describe("A list of valuesMap objects.").default(null) }).describe("Provides program specific metadata from VTN to VEN.");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9kLXByb2dyYW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvem9kL3pvZC1wcm9ncmFtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFFeEIsZUFBZSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLGtDQUFrQyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLDBDQUEwQyxDQUFDLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxzREFBc0QsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLHFEQUFxRCxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLG1DQUFtQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLDhCQUE4QixDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsMENBQTBDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxvSEFBb0gsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLDZCQUE2QixDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLG9IQUFvSCxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxvSEFBb0gsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLDZCQUE2QixDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsbU1BQW1NLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxxREFBcUQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLCtEQUErRCxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQywwTUFBME0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsK0RBQStELENBQUMsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyw4REFBOEQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyw4REFBOEQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLGdFQUFnRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsNk1BQTZNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsK0JBQStCLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMscUlBQXFJLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxxRUFBcUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxxRUFBcUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsOEdBQThHLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLHFEQUFxRCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuXG5leHBvcnQgZGVmYXVsdCB6Lm9iamVjdCh7IFwiaWRcIjogei5zdHJpbmcoKS5yZWdleChuZXcgUmVnRXhwKFwiXlthLXpBLVowLTlfLV0qJFwiKSkubWluKDEpLm1heCgxMjgpLmRlc2NyaWJlKFwiVVJMIHNhZmUgVlROIGFzc2lnbmVkIG9iamVjdCBJRC5cIikub3B0aW9uYWwoKSwgXCJjcmVhdGVkRGF0ZVRpbWVcIjogei5zdHJpbmcoKS5kYXRldGltZSgpLmRlc2NyaWJlKFwiZGF0ZXRpbWUgaW4gSVNPIDg2MDEgZm9ybWF0XCIpLm9wdGlvbmFsKCksIFwibW9kaWZpY2F0aW9uRGF0ZVRpbWVcIjogei5zdHJpbmcoKS5kYXRldGltZSgpLmRlc2NyaWJlKFwiZGF0ZXRpbWUgaW4gSVNPIDg2MDEgZm9ybWF0XCIpLm9wdGlvbmFsKCksIFwib2JqZWN0VHlwZVwiOiB6LmxpdGVyYWwoXCJQUk9HUkFNXCIpLmRlc2NyaWJlKFwiVXNlZCBhcyBkaXNjcmltaW5hdG9yXCIpLm9wdGlvbmFsKCksIFwicHJvZ3JhbU5hbWVcIjogei5zdHJpbmcoKS5taW4oMSkubWF4KDEyOCkuZGVzY3JpYmUoXCJTaG9ydCBuYW1lIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHByb2dyYW0uXCIpLCBcInByb2dyYW1Mb25nTmFtZVwiOiB6LnN0cmluZygpLm51bGxhYmxlKCkuZGVzY3JpYmUoXCJMb25nIG5hbWUgb2YgcHJvZ3JhbSBmb3IgaHVtYW4gcmVhZGFiaWxpdHkuXCIpLmRlZmF1bHQobnVsbCksIFwicmV0YWlsZXJOYW1lXCI6IHouc3RyaW5nKCkubnVsbGFibGUoKS5kZXNjcmliZShcIlNob3J0IG5hbWUgb2YgZW5lcmd5IHJldGFpbGVyIHByb3ZpZGluZyB0aGUgcHJvZ3JhbS5cIikuZGVmYXVsdChudWxsKSwgXCJyZXRhaWxlckxvbmdOYW1lXCI6IHouc3RyaW5nKCkubnVsbGFibGUoKS5kZXNjcmliZShcIkxvbmcgbmFtZSBvZiBlbmVyZ3kgcmV0YWlsZXIgZm9yIGh1bWFuIHJlYWRhYmlsaXR5LlwiKS5kZWZhdWx0KG51bGwpLCBcInByb2dyYW1UeXBlXCI6IHouc3RyaW5nKCkubnVsbGFibGUoKS5kZXNjcmliZShcIkEgcHJvZ3JhbSBkZWZpbmVkIGNhdGVnb3JpemF0aW9uLlwiKS5kZWZhdWx0KG51bGwpLCBcImNvdW50cnlcIjogei5zdHJpbmcoKS5udWxsYWJsZSgpLmRlc2NyaWJlKFwiQWxwaGEtMiBjb2RlIHBlciBJU08gMzE2Ni0xLlwiKS5kZWZhdWx0KG51bGwpLCBcInByaW5jaXBhbFN1YmRpdmlzaW9uXCI6IHouc3RyaW5nKCkubnVsbGFibGUoKS5kZXNjcmliZShcIkNvZGluZyBwZXIgSVNPIDMxNjYtMi4gRS5nLiBzdGF0ZSBpbiBVUy5cIikuZGVmYXVsdChudWxsKSwgXCJ0aW1lWm9uZU9mZnNldFwiOiB6LnN0cmluZygpLnJlZ2V4KG5ldyBSZWdFeHAoXCJeKC0/KVAoPz1cXFxcZHxUXFxcXGQpKD86KFxcXFxkKylZKT8oPzooXFxcXGQrKU0pPyg/OihcXFxcZCspKFtEV10pKT8oPzpUKD86KFxcXFxkKylIKT8oPzooXFxcXGQrKU0pPyg/OihcXFxcZCsoPzpcXFxcLlxcXFxkKyk/KVMpPyk/JFwiKSkuZGVzY3JpYmUoXCJkdXJhdGlvbiBpbiBJU08gODYwMSBmb3JtYXRcIikuZGVmYXVsdChcIlBUMFNcIiksIFwiaW50ZXJ2YWxQZXJpb2RcIjogei5vYmplY3QoeyBcInN0YXJ0XCI6IHouc3RyaW5nKCkuZGF0ZXRpbWUoKS5kZXNjcmliZShcImRhdGV0aW1lIGluIElTTyA4NjAxIGZvcm1hdFwiKSwgXCJkdXJhdGlvblwiOiB6LnN0cmluZygpLnJlZ2V4KG5ldyBSZWdFeHAoXCJeKC0/KVAoPz1cXFxcZHxUXFxcXGQpKD86KFxcXFxkKylZKT8oPzooXFxcXGQrKU0pPyg/OihcXFxcZCspKFtEV10pKT8oPzpUKD86KFxcXFxkKylIKT8oPzooXFxcXGQrKU0pPyg/OihcXFxcZCsoPzpcXFxcLlxcXFxkKyk/KVMpPyk/JFwiKSkuZGVzY3JpYmUoXCJkdXJhdGlvbiBpbiBJU08gODYwMSBmb3JtYXRcIikuZGVmYXVsdChcIlBUMFNcIiksIFwicmFuZG9taXplU3RhcnRcIjogei5zdHJpbmcoKS5yZWdleChuZXcgUmVnRXhwKFwiXigtPylQKD89XFxcXGR8VFxcXFxkKSg/OihcXFxcZCspWSk/KD86KFxcXFxkKylNKT8oPzooXFxcXGQrKShbRFddKSk/KD86VCg/OihcXFxcZCspSCk/KD86KFxcXFxkKylNKT8oPzooXFxcXGQrKD86XFxcXC5cXFxcZCspPylTKT8pPyRcIikpLmRlc2NyaWJlKFwiZHVyYXRpb24gaW4gSVNPIDg2MDEgZm9ybWF0XCIpLmRlZmF1bHQoXCJQVDBTXCIpIH0pLmRlc2NyaWJlKFwiRGVmaW5lcyB0ZW1wb3JhbCBhc3BlY3RzIG9mIGludGVydmFscy5cXG5BIGR1cmF0aW9uIG9mIGRlZmF1bHQgUFQwUyBpbmRpY2F0ZXMgaW5zdGFudGFuZW91cyBvciBpbmZpbml0eSwgZGVwZW5kaW5nIG9uIHBheWxvYWRUeXBlLlxcbkEgcmFuZG9taXplU3RhcnQgb2YgZGVmYXVsdCBudWxsIGluZGljYXRlcyBubyByYW5kb21pemF0aW9uLlxcblwiKS5vcHRpb25hbCgpLCBcInByb2dyYW1EZXNjcmlwdGlvbnNcIjogei5hcnJheSh6LmFueSgpKS5udWxsYWJsZSgpLmRlc2NyaWJlKFwiQSBsaXN0IG9mIHByb2dyYW1EZXNjcmlwdGlvbnNcIikuZGVmYXVsdChudWxsKSwgXCJiaW5kaW5nRXZlbnRzXCI6IHouYm9vbGVhbigpLm51bGxhYmxlKCkuZGVzY3JpYmUoXCJUcnVlIGlmIGV2ZW50cyBhcmUgZml4ZWQgb25jZSB0cmFuc21pdHRlZC5cIikuZGVmYXVsdChudWxsKSwgXCJsb2NhbFByaWNlXCI6IHouYm9vbGVhbigpLm51bGxhYmxlKCkuZGVzY3JpYmUoXCJUcnVlIGlmIGV2ZW50cyBoYXZlIGJlZW4gYWRhcHRlZCBmcm9tIGEgZ3JpZCBldmVudC5cIikuZGVmYXVsdChudWxsKSwgXCJwYXlsb2FkRGVzY3JpcHRvcnNcIjogei5hcnJheSh6LnVuaW9uKFt6Lm9iamVjdCh7IFwib2JqZWN0VHlwZVwiOiB6LmxpdGVyYWwoXCJFVkVOVF9QQVlMT0FEX0RFU0NSSVBUT1JcIikuZGVzY3JpYmUoXCJVc2VkIGFzIGRpc2NyaW1pbmF0b3IuXCIpLm9wdGlvbmFsKCksIFwicGF5bG9hZFR5cGVcIjogei5zdHJpbmcoKS5taW4oMSkubWF4KDEyOCkuZGVzY3JpYmUoXCJFbnVtZXJhdGVkIG9yIHByaXZhdGUgc3RyaW5nIHNpZ25pZnlpbmcgdGhlIG5hdHVyZSBvZiB2YWx1ZXMuXCIpLCBcInVuaXRzXCI6IHouc3RyaW5nKCkubnVsbGFibGUoKS5kZXNjcmliZShcIlVuaXRzIG9mIG1lYXN1cmUuXCIpLmRlZmF1bHQobnVsbCksIFwiY3VycmVuY3lcIjogei5zdHJpbmcoKS5udWxsYWJsZSgpLmRlc2NyaWJlKFwiQ3VycmVuY3kgb2YgcHJpY2UgcGF5bG9hZC5cIikuZGVmYXVsdChudWxsKSB9KS5kZXNjcmliZShcIkNvbnRleHR1YWwgaW5mb3JtYXRpb24gdXNlZCB0byBpbnRlcnByZXQgZXZlbnQgdmFsdWVzTWFwIHZhbHVlcy5cXG5FLmcuIGEgUFJJQ0UgcGF5bG9hZCBzaW1wbHkgY29udGFpbnMgYSBwcmljZSB2YWx1ZSwgYW5cXG5hc3NvY2lhdGVkIGRlc2NyaXB0b3IgcHJvdmlkZXMgbmVjZXNzYXJ5IGNvbnRleHQgc3VjaCBhcyB1bml0cyBhbmQgY3VycmVuY3kuXFxuXCIpLCB6Lm9iamVjdCh7IFwib2JqZWN0VHlwZVwiOiB6LmxpdGVyYWwoXCJSRVBPUlRfUEFZTE9BRF9ERVNDUklQVE9SXCIpLmRlc2NyaWJlKFwiVXNlZCBhcyBkaXNjcmltaW5hdG9yLlwiKS5vcHRpb25hbCgpLCBcInBheWxvYWRUeXBlXCI6IHouc3RyaW5nKCkubWluKDEpLm1heCgxMjgpLmRlc2NyaWJlKFwiRW51bWVyYXRlZCBvciBwcml2YXRlIHN0cmluZyBzaWduaWZ5aW5nIHRoZSBuYXR1cmUgb2YgdmFsdWVzLlwiKSwgXCJyZWFkaW5nVHlwZVwiOiB6LnN0cmluZygpLm51bGxhYmxlKCkuZGVzY3JpYmUoXCJFbnVtZXJhdGVkIG9yIHByaXZhdGUgc3RyaW5nIHNpZ25pZnlpbmcgdGhlIHR5cGUgb2YgcmVhZGluZy5cIikuZGVmYXVsdChudWxsKSwgXCJ1bml0c1wiOiB6LnN0cmluZygpLm51bGxhYmxlKCkuZGVzY3JpYmUoXCJVbml0cyBvZiBtZWFzdXJlLlwiKS5kZWZhdWx0KG51bGwpLCBcImFjY3VyYWN5XCI6IHoubnVtYmVyKCkubnVsbGFibGUoKS5kZXNjcmliZShcIkEgcXVhbnRpZmljYXRpb24gb2YgdGhlIGFjY3VyYWN5IG9mIGEgc2V0IG9mIHBheWxvYWQgdmFsdWVzLlwiKS5kZWZhdWx0KG51bGwpLCBcImNvbmZpZGVuY2VcIjogei5udW1iZXIoKS5pbnQoKS5ndGUoMCkubHRlKDEwMCkubnVsbGFibGUoKS5kZXNjcmliZShcIkEgcXVhbnRpZmljYXRpb24gb2YgdGhlIGNvbmZpZGVuY2UgaW4gYSBzZXQgb2YgcGF5bG9hZCB2YWx1ZXMuXCIpLmRlZmF1bHQobnVsbCkgfSkuZGVzY3JpYmUoXCJDb250ZXh0dWFsIGluZm9ybWF0aW9uIHVzZWQgdG8gaW50ZXJwcmV0IHJlcG9ydCBwYXlsb2FkIHZhbHVlcy5cXG5FLmcuIGEgVVNBR0UgcGF5bG9hZCBzaW1wbHkgY29udGFpbnMgYSB1c2FnZSB2YWx1ZSwgYW5cXG5hc3NvY2lhdGVkIGRlc2NyaXB0b3IgcHJvdmlkZXMgbmVjZXNzYXJ5IGNvbnRleHQgc3VjaCBhcyB1bml0cyBhbmQgZGF0YSBxdWFsaXR5LlxcblwiKV0pKS5udWxsYWJsZSgpLmRlc2NyaWJlKFwiQSBsaXN0IG9mIHBheWxvYWREZXNjcmlwdG9ycy5cIikuZGVmYXVsdChudWxsKSwgXCJ0YXJnZXRzXCI6IHouYXJyYXkoei5vYmplY3QoeyBcInR5cGVcIjogei5zdHJpbmcoKS5taW4oMSkubWF4KDEyOCkuZGVzY3JpYmUoXCJFbnVtZXJhdGVkIG9yIHByaXZhdGUgc3RyaW5nIHNpZ25pZnlpbmcgdGhlIG5hdHVyZSBvZiB2YWx1ZXMuXFxuRS5HLiBcXFwiUFJJQ0VcXFwiIGluZGljYXRlcyB2YWx1ZSBpcyB0byBiZSBpbnRlcnByZXRlZCBhcyBhIGN1cnJlbmN5LlxcblwiKSwgXCJ2YWx1ZXNcIjogei5hcnJheSh6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLmludCgpLCB6LnN0cmluZygpLCB6LmJvb2xlYW4oKSwgei5vYmplY3QoeyBcInhcIjogei5udW1iZXIoKS5kZXNjcmliZShcIkEgdmFsdWUgb24gYW4geCBheGlzLlwiKSwgXCJ5XCI6IHoubnVtYmVyKCkuZGVzY3JpYmUoXCJBIHZhbHVlIG9uIGEgeSBheGlzLlwiKSB9KS5kZXNjcmliZShcIkEgcGFpciBvZiBmbG9hdHMgdHlwaWNhbGx5IHVzZWQgYXMgYSBwb2ludCBvbiBhIDIgZGltZW5zaW9uYWwgZ3JpZC5cIildKSkuZGVzY3JpYmUoXCJBIGxpc3Qgb2YgZGF0YSBwb2ludHMuIE1vc3Qgb2Z0ZW4gYSBzaW5ndWxhciB2YWx1ZSBzdWNoIGFzIGEgcHJpY2UuXCIpIH0pLmRlc2NyaWJlKFwiUmVwcmVzZW50cyBvbmUgb3IgbW9yZSB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIGEgdHlwZS5cXG5FLmcuIGEgdHlwZSBvZiBQUklDRSBjb250YWlucyBhIHNpbmdsZSBmbG9hdCB2YWx1ZS5cXG5cIikpLm51bGxhYmxlKCkuZGVzY3JpYmUoXCJBIGxpc3Qgb2YgdmFsdWVzTWFwIG9iamVjdHMuXCIpLmRlZmF1bHQobnVsbCkgfSkuZGVzY3JpYmUoXCJQcm92aWRlcyBwcm9ncmFtIHNwZWNpZmljIG1ldGFkYXRhIGZyb20gVlROIHRvIFZFTi5cIik7XG4iXX0=