// export * from './types.js';
// export * from './zod-types.js';
// export * from './codegen/openAdRSchemas.js';
// export * from './codegen/openAdRSchemas-zod.js';
export * from './codegen/openadr3ApiComponents.js';
export { default as parseDateTime } from './zod/zod-dateTime.js';
export { default as parseDuration } from './zod/zod-duration.js';
export { default as parseEvent } from './zod/zod-event.js';
export { default as parseEventPayloadDescriptor } from './zod/zod-eventPayloadDescriptor.js';
export { default as parseInterval } from './zod/zod-interval.js';
export { default as parseIntervalPeriod } from './zod/zod-intervalPeriod.js';
export { default as parseNotification } from './zod/zod-notification.js';
export { default as parseObjectID } from './zod/zod-objectID.js';
export { default as parseObjectTypes } from './zod/zod-objectTypes.js';
export { default as parsePoint } from './zod/zod-point.js';
export { default as parseProblem } from './zod/zod-problem.js';
export { default as parseProgram } from './zod/zod-program.js';
export { default as parseReport } from './zod/zod-report.js';
export { default as parseReportDescriptor } from './zod/zod-reportDescriptor.js';
export { default as parseReportPayloadDescriptor } from './zod/zod-reportPayloadDescriptor.js';
export { default as parseResource } from './zod/zod-resource.js';
export { default as parseSubscription } from './zod/zod-subscription.js';
export { default as parseValuesMap } from './zod/zod-valuesMap.js';
export { default as parseVen } from './zod/zod-ven.js';
// These linex are for inspecting the type as understood by Zod.
// Uncomment the lines, fixing up a declaration for the type
// you want to inspect.  Then, in Visual Studio Code, hover the
// mouse over the `zodTypeName` variable, and a popup appears
// showing the type.
// import { z } from 'zod';
// import { default as parseEvent } from './zod/zod-event.js';
// type zodEvent = z.infer<typeof parseEvent>;
// This section supports using './codegen/openADRSchemas-zod.js'
// as the source for Zod schema's.  That file can be generated
// using `ts-to-zod` from  './codegen/openADRSchemas.js'.
//
// In that case each schema object has the name `typeNameSchema`
// but we want to export `parseTypeName` instead.
//
// The fatal problem with these schema's is that default values
// for nested Zod schema's are not properly handled. 
// export {
//     dateTimeSchema as parseDateTime,
//     durationSchema as parseDuration,
//     eventSchema as parseEvent,
//     eventPayloadDescriptorSchema as parseEventPayloadDescriptor,
//     intervalPeriodSchema as parseIntervalPeriod,
//     intervalSchema as parseInterval,
//     notificationSchema as parseNotification,
//     objectIDSchema as parseObjectID,
//     objectTypesSchema as parseObjectTypes,
//     pointSchema as parsePoint,
//     problemSchema as parseProblem,
//     programSchema as parseProgram,
//     reportDescriptorSchema as parseReportDescriptor,
//     reportSchema as parseReport,
//     reportPayloadDescriptorSchema as parseReportPayloadDescriptor,
//     resourceSchema as parseResource,
//     subscriptionSchema as parseSubscription,
//     valuesMapSchema as parseValuesMap,
//     venSchema as parseVen
// } from './codegen/openADRSchemas-zod.js';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsOEJBQThCO0FBQzlCLGtDQUFrQztBQUVsQywrQ0FBK0M7QUFDL0MsbURBQW1EO0FBQ25ELGNBQWMsb0NBQW9DLENBQUM7QUFjbkQsT0FBTyxFQUFFLE9BQU8sSUFBSSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsT0FBTyxJQUFJLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxPQUFPLElBQUksVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDM0QsT0FBTyxFQUFFLE9BQU8sSUFBSSwyQkFBMkIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzdGLE9BQU8sRUFBRSxPQUFPLElBQUksYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDakUsT0FBTyxFQUFFLE9BQU8sSUFBSSxtQkFBbUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzdFLE9BQU8sRUFBRSxPQUFPLElBQUksaUJBQWlCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsT0FBTyxJQUFJLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxPQUFPLElBQUksZ0JBQWdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsT0FBTyxJQUFJLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzNELE9BQU8sRUFBRSxPQUFPLElBQUksWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLE9BQU8sSUFBSSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsT0FBTyxJQUFJLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzdELE9BQU8sRUFBRSxPQUFPLElBQUkscUJBQXFCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNqRixPQUFPLEVBQUUsT0FBTyxJQUFJLDRCQUE0QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDL0YsT0FBTyxFQUFFLE9BQU8sSUFBSSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsT0FBTyxJQUFJLGlCQUFpQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDekUsT0FBTyxFQUFFLE9BQU8sSUFBSSxjQUFjLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsT0FBTyxJQUFJLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXZELGdFQUFnRTtBQUNoRSw0REFBNEQ7QUFDNUQsK0RBQStEO0FBQy9ELDZEQUE2RDtBQUM3RCxvQkFBb0I7QUFFcEIsMkJBQTJCO0FBRTNCLDhEQUE4RDtBQUM5RCw4Q0FBOEM7QUFFOUMsZ0VBQWdFO0FBQ2hFLDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsRUFBRTtBQUNGLGdFQUFnRTtBQUNoRSxpREFBaUQ7QUFDakQsRUFBRTtBQUNGLCtEQUErRDtBQUMvRCxxREFBcUQ7QUFFckQsV0FBVztBQUNYLHVDQUF1QztBQUN2Qyx1Q0FBdUM7QUFDdkMsaUNBQWlDO0FBQ2pDLG1FQUFtRTtBQUVuRSxtREFBbUQ7QUFDbkQsdUNBQXVDO0FBRXZDLCtDQUErQztBQUUvQyx1Q0FBdUM7QUFDdkMsNkNBQTZDO0FBRTdDLGlDQUFpQztBQUNqQyxxQ0FBcUM7QUFDckMscUNBQXFDO0FBRXJDLHVEQUF1RDtBQUN2RCxtQ0FBbUM7QUFDbkMscUVBQXFFO0FBQ3JFLHVDQUF1QztBQUV2QywrQ0FBK0M7QUFFL0MseUNBQXlDO0FBQ3pDLDRCQUE0QjtBQUM1Qiw0Q0FBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIGV4cG9ydCAqIGZyb20gJy4vdHlwZXMuanMnO1xuLy8gZXhwb3J0ICogZnJvbSAnLi96b2QtdHlwZXMuanMnO1xuXG4vLyBleHBvcnQgKiBmcm9tICcuL2NvZGVnZW4vb3BlbkFkUlNjaGVtYXMuanMnO1xuLy8gZXhwb3J0ICogZnJvbSAnLi9jb2RlZ2VuL29wZW5BZFJTY2hlbWFzLXpvZC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2NvZGVnZW4vb3BlbmFkcjNBcGlDb21wb25lbnRzLmpzJztcblxuZXhwb3J0IHtcbiAgICBEYXRlVGltZSwgRHVyYXRpb24sXG4gICAgRXZlbnQsIEV2ZW50UGF5bG9hZERlc2NyaXB0b3IsXG4gICAgSW50ZXJ2YWwsIEludGVydmFsUGVyaW9kLFxuICAgIE5vdGlmaWNhdGlvbixcbiAgICBPYmplY3RJRCwgT2JqZWN0VHlwZXMsXG4gICAgUG9pbnQsIFByb2JsZW0sIFByb2dyYW0sXG4gICAgUmVwb3J0LCBSZXBvcnREZXNjcmlwdG9yLCBSZXBvcnRQYXlsb2FkRGVzY3JpcHRvciwgUmVzb3VyY2UsXG4gICAgU3Vic2NyaXB0aW9uLFxuICAgIFZhbHVlc01hcCwgVmVuXG59IGZyb20gJy4vY29kZWdlbi9vcGVuQURSU2NoZW1hcy5qcyc7XG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFyc2VEYXRlVGltZSB9IGZyb20gJy4vem9kL3pvZC1kYXRlVGltZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBhcnNlRHVyYXRpb24gfSBmcm9tICcuL3pvZC96b2QtZHVyYXRpb24uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYXJzZUV2ZW50IH0gZnJvbSAnLi96b2Qvem9kLWV2ZW50LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFyc2VFdmVudFBheWxvYWREZXNjcmlwdG9yIH0gZnJvbSAnLi96b2Qvem9kLWV2ZW50UGF5bG9hZERlc2NyaXB0b3IuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYXJzZUludGVydmFsIH0gZnJvbSAnLi96b2Qvem9kLWludGVydmFsLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFyc2VJbnRlcnZhbFBlcmlvZCB9IGZyb20gJy4vem9kL3pvZC1pbnRlcnZhbFBlcmlvZC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBhcnNlTm90aWZpY2F0aW9uIH0gZnJvbSAnLi96b2Qvem9kLW5vdGlmaWNhdGlvbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBhcnNlT2JqZWN0SUQgfSBmcm9tICcuL3pvZC96b2Qtb2JqZWN0SUQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYXJzZU9iamVjdFR5cGVzIH0gZnJvbSAnLi96b2Qvem9kLW9iamVjdFR5cGVzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFyc2VQb2ludCB9IGZyb20gJy4vem9kL3pvZC1wb2ludC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBhcnNlUHJvYmxlbSB9IGZyb20gJy4vem9kL3pvZC1wcm9ibGVtLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFyc2VQcm9ncmFtIH0gZnJvbSAnLi96b2Qvem9kLXByb2dyYW0uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYXJzZVJlcG9ydCB9IGZyb20gJy4vem9kL3pvZC1yZXBvcnQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYXJzZVJlcG9ydERlc2NyaXB0b3IgfSBmcm9tICcuL3pvZC96b2QtcmVwb3J0RGVzY3JpcHRvci5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBhcnNlUmVwb3J0UGF5bG9hZERlc2NyaXB0b3IgfSBmcm9tICcuL3pvZC96b2QtcmVwb3J0UGF5bG9hZERlc2NyaXB0b3IuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYXJzZVJlc291cmNlIH0gZnJvbSAnLi96b2Qvem9kLXJlc291cmNlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFyc2VTdWJzY3JpcHRpb24gfSBmcm9tICcuL3pvZC96b2Qtc3Vic2NyaXB0aW9uLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFyc2VWYWx1ZXNNYXAgfSBmcm9tICcuL3pvZC96b2QtdmFsdWVzTWFwLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFyc2VWZW4gfSBmcm9tICcuL3pvZC96b2QtdmVuLmpzJztcblxuLy8gVGhlc2UgbGluZXggYXJlIGZvciBpbnNwZWN0aW5nIHRoZSB0eXBlIGFzIHVuZGVyc3Rvb2QgYnkgWm9kLlxuLy8gVW5jb21tZW50IHRoZSBsaW5lcywgZml4aW5nIHVwIGEgZGVjbGFyYXRpb24gZm9yIHRoZSB0eXBlXG4vLyB5b3Ugd2FudCB0byBpbnNwZWN0LiAgVGhlbiwgaW4gVmlzdWFsIFN0dWRpbyBDb2RlLCBob3ZlciB0aGVcbi8vIG1vdXNlIG92ZXIgdGhlIGB6b2RUeXBlTmFtZWAgdmFyaWFibGUsIGFuZCBhIHBvcHVwIGFwcGVhcnNcbi8vIHNob3dpbmcgdGhlIHR5cGUuXG5cbi8vIGltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuXG4vLyBpbXBvcnQgeyBkZWZhdWx0IGFzIHBhcnNlRXZlbnQgfSBmcm9tICcuL3pvZC96b2QtZXZlbnQuanMnO1xuLy8gdHlwZSB6b2RFdmVudCA9IHouaW5mZXI8dHlwZW9mIHBhcnNlRXZlbnQ+O1xuXG4vLyBUaGlzIHNlY3Rpb24gc3VwcG9ydHMgdXNpbmcgJy4vY29kZWdlbi9vcGVuQURSU2NoZW1hcy16b2QuanMnXG4vLyBhcyB0aGUgc291cmNlIGZvciBab2Qgc2NoZW1hJ3MuICBUaGF0IGZpbGUgY2FuIGJlIGdlbmVyYXRlZFxuLy8gdXNpbmcgYHRzLXRvLXpvZGAgZnJvbSAgJy4vY29kZWdlbi9vcGVuQURSU2NoZW1hcy5qcycuXG4vL1xuLy8gSW4gdGhhdCBjYXNlIGVhY2ggc2NoZW1hIG9iamVjdCBoYXMgdGhlIG5hbWUgYHR5cGVOYW1lU2NoZW1hYFxuLy8gYnV0IHdlIHdhbnQgdG8gZXhwb3J0IGBwYXJzZVR5cGVOYW1lYCBpbnN0ZWFkLlxuLy9cbi8vIFRoZSBmYXRhbCBwcm9ibGVtIHdpdGggdGhlc2Ugc2NoZW1hJ3MgaXMgdGhhdCBkZWZhdWx0IHZhbHVlc1xuLy8gZm9yIG5lc3RlZCBab2Qgc2NoZW1hJ3MgYXJlIG5vdCBwcm9wZXJseSBoYW5kbGVkLiBcblxuLy8gZXhwb3J0IHtcbi8vICAgICBkYXRlVGltZVNjaGVtYSBhcyBwYXJzZURhdGVUaW1lLFxuLy8gICAgIGR1cmF0aW9uU2NoZW1hIGFzIHBhcnNlRHVyYXRpb24sXG4vLyAgICAgZXZlbnRTY2hlbWEgYXMgcGFyc2VFdmVudCxcbi8vICAgICBldmVudFBheWxvYWREZXNjcmlwdG9yU2NoZW1hIGFzIHBhcnNlRXZlbnRQYXlsb2FkRGVzY3JpcHRvcixcblxuLy8gICAgIGludGVydmFsUGVyaW9kU2NoZW1hIGFzIHBhcnNlSW50ZXJ2YWxQZXJpb2QsXG4vLyAgICAgaW50ZXJ2YWxTY2hlbWEgYXMgcGFyc2VJbnRlcnZhbCxcblxuLy8gICAgIG5vdGlmaWNhdGlvblNjaGVtYSBhcyBwYXJzZU5vdGlmaWNhdGlvbixcblxuLy8gICAgIG9iamVjdElEU2NoZW1hIGFzIHBhcnNlT2JqZWN0SUQsXG4vLyAgICAgb2JqZWN0VHlwZXNTY2hlbWEgYXMgcGFyc2VPYmplY3RUeXBlcyxcblxuLy8gICAgIHBvaW50U2NoZW1hIGFzIHBhcnNlUG9pbnQsXG4vLyAgICAgcHJvYmxlbVNjaGVtYSBhcyBwYXJzZVByb2JsZW0sXG4vLyAgICAgcHJvZ3JhbVNjaGVtYSBhcyBwYXJzZVByb2dyYW0sXG5cbi8vICAgICByZXBvcnREZXNjcmlwdG9yU2NoZW1hIGFzIHBhcnNlUmVwb3J0RGVzY3JpcHRvcixcbi8vICAgICByZXBvcnRTY2hlbWEgYXMgcGFyc2VSZXBvcnQsXG4vLyAgICAgcmVwb3J0UGF5bG9hZERlc2NyaXB0b3JTY2hlbWEgYXMgcGFyc2VSZXBvcnRQYXlsb2FkRGVzY3JpcHRvcixcbi8vICAgICByZXNvdXJjZVNjaGVtYSBhcyBwYXJzZVJlc291cmNlLFxuXG4vLyAgICAgc3Vic2NyaXB0aW9uU2NoZW1hIGFzIHBhcnNlU3Vic2NyaXB0aW9uLFxuICAgIFxuLy8gICAgIHZhbHVlc01hcFNjaGVtYSBhcyBwYXJzZVZhbHVlc01hcCxcbi8vICAgICB2ZW5TY2hlbWEgYXMgcGFyc2VWZW5cbi8vIH0gZnJvbSAnLi9jb2RlZ2VuL29wZW5BRFJTY2hlbWFzLXpvZC5qcyc7XG4iXX0=