export {};
/**
 * Return an access token based on clientID and clientSecret.
 */
// export const fetchToken = (
//   variables: FetchTokenVariables,
//   signal?: AbortSignal
// ) =>
//   openadr3ApiFetch<
//     string,
//     FetchTokenError,
//     undefined,
//     FetchTokenHeaders,
//     {},
//     {}
//   >({ url: "/auth/token", method: "get", ...variables, signal });
// export const operationsByTag = {
//   programs: {
//     searchAllPrograms,
//     createProgram,
//     searchProgramByProgramId,
//     updateProgram,
//     deleteProgram,
//   },
//   reports: {
//     searchAllReports,
//     createReport,
//     searchReportsByReportID,
//     updateReport,
//     deleteReport,
//   },
//   events: {
//     searchAllEvents,
//     createEvent,
//     searchEventsByID,
//     updateEvent,
//     deleteEvent,
//   },
//   subscriptions: {
//     searchSubscriptions,
//     createSubscription,
//     searchSubscriptionByID,
//     updateSubscription,
//     deleteSubscription,
//   },
//   vens: {
//     searchVens,
//     createVen,
//     searchVenByID,
//     updateVen,
//     deleteVen,
//     searchVenResources,
//     createResource,
//     searchVenResourceByID,
//     updateVenResource,
//     deleteVenResource,
//   },
//   auth: { fetchToken },
// };
//# sourceMappingURL=data:application/json;base64,