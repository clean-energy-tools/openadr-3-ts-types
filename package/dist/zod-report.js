"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const zod_1 = require("zod");
exports.default = zod_1.z
    .object({
    id: zod_1.z
        .string()
        .regex(new RegExp("^[a-zA-Z0-9_-]*$"))
        .min(1)
        .max(128)
        .describe("URL safe VTN assigned object ID.")
        .optional(),
    createdDateTime: zod_1.z
        .string()
        .datetime()
        .describe("datetime in ISO 8601 format")
        .default("0000-00-00"),
    modificationDateTime: zod_1.z
        .string()
        .datetime()
        .describe("datetime in ISO 8601 format")
        .default("0000-00-00"),
    objectType: zod_1.z
        .literal("REPORT")
        .describe("Used as discriminator, e.g. notification.object")
        .optional(),
    programID: zod_1.z
        .string()
        .regex(new RegExp("^[a-zA-Z0-9_-]*$"))
        .min(1)
        .max(128)
        .describe("URL safe VTN assigned object ID."),
    eventID: zod_1.z
        .string()
        .regex(new RegExp("^[a-zA-Z0-9_-]*$"))
        .min(1)
        .max(128)
        .describe("URL safe VTN assigned object ID."),
    clientName: zod_1.z
        .string()
        .min(1)
        .max(128)
        .describe("User generated identifier; may be VEN ID provisioned during program enrollment."),
    reportName: zod_1.z
        .string()
        .describe("User defined string for use in debugging or User Interface.")
        .default(null)
        .nullable()
        .describe("User defined string for use in debugging or User Interface.")
        .default(null),
    payloadDescriptors: zod_1.z
        .array(zod_1.z
        .object({
        objectType: zod_1.z
            .string()
            .describe("Used as discriminator, e.g. program.payloadDescriptors")
            .default("REPORT_PAYLOAD_DESCRIPTOR"),
        payloadType: zod_1.z
            .string()
            .min(1)
            .max(128)
            .describe("Enumerated or private string signifying the nature of values."),
        readingType: zod_1.z
            .string()
            .describe("Enumerated or private string signifying the type of reading.")
            .default("DIRECT_READ")
            .nullable()
            .describe("Enumerated or private string signifying the type of reading.")
            .default("DIRECT_READ"),
        units: zod_1.z
            .string()
            .describe("Units of measure.")
            .default("KWH")
            .nullable()
            .describe("Units of measure.")
            .default("KWH"),
        accuracy: zod_1.z
            .number()
            .describe("A quantification of the accuracy of a set of payload values.")
            .default(0)
            .nullable()
            .describe("A quantification of the accuracy of a set of payload values.")
            .default(0),
        confidence: zod_1.z
            .number()
            .int()
            .gte(0)
            .lte(100)
            .describe("A quantification of the confidence in a set of payload values.")
            .default(100),
    })
        .describe("Contextual information used to interpret report payload values.\nE.g. a USAGE payload simply contains a usage value, an\nassociated descriptor provides necessary context such as units and data quality.\n"))
        .describe("A list of reportPayloadDescriptors.")
        .default(null)
        .nullable()
        .describe("A list of reportPayloadDescriptors.")
        .default(null),
    resources: zod_1.z
        .array(zod_1.z
        .object({
        resourceName: zod_1.z
            .string()
            .min(1)
            .max(128)
            .describe("User generated identifier. A value of AGGREGATED_REPORT indicates an aggregation of more that one resource's data"),
        intervalPeriod: zod_1.z
            .object({
            start: zod_1.z
                .string()
                .datetime()
                .describe("datetime in ISO 8601 format")
                .default("0000-00-00"),
            duration: zod_1.z
                .string()
                .regex(new RegExp("/^(-?)P(?=\\d|T\\d)(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)([DW]))?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/"))
                .describe("duration in ISO 8601 format")
                .default("PT0S"),
            randomizeStart: zod_1.z
                .string()
                .regex(new RegExp("/^(-?)P(?=\\d|T\\d)(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)([DW]))?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/"))
                .describe("duration in ISO 8601 format")
                .default("PT0S"),
        })
            .describe("Defines temporal aspects of intervals.\nA duration of default null indicates infinity.\nA randomizeStart of default null indicates no randomization.\n")
            .optional(),
        intervals: zod_1.z
            .array(zod_1.z
            .object({
            id: zod_1.z
                .number()
                .int()
                .describe("A client generated number assigned an interval object. Not a sequence number."),
            intervalPeriod: zod_1.z
                .object({
                start: zod_1.z
                    .string()
                    .datetime()
                    .describe("datetime in ISO 8601 format")
                    .default("0000-00-00"),
                duration: zod_1.z
                    .string()
                    .regex(new RegExp("/^(-?)P(?=\\d|T\\d)(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)([DW]))?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/"))
                    .describe("duration in ISO 8601 format")
                    .default("PT0S"),
                randomizeStart: zod_1.z
                    .string()
                    .regex(new RegExp("/^(-?)P(?=\\d|T\\d)(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)([DW]))?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/"))
                    .describe("duration in ISO 8601 format")
                    .default("PT0S"),
            })
                .describe("Defines temporal aspects of intervals.\nA duration of default null indicates infinity.\nA randomizeStart of default null indicates no randomization.\n")
                .optional(),
            payloads: zod_1.z
                .array(zod_1.z
                .object({
                type: zod_1.z
                    .string()
                    .min(1)
                    .max(128)
                    .describe('Enumerated or private string signifying the nature of values.\nE.G. "PRICE" indicates value is to be interpreted as a currency.\n'),
                values: zod_1.z
                    .array(zod_1.z.union([
                    zod_1.z.number(),
                    zod_1.z.number().int(),
                    zod_1.z.string(),
                    zod_1.z.boolean(),
                    zod_1.z
                        .object({
                        x: zod_1.z
                            .number()
                            .describe("A value on an x axis.")
                            .default(null)
                            .nullable()
                            .describe("A value on an x axis.")
                            .default(null),
                        y: zod_1.z
                            .number()
                            .describe("A value on a y axis.")
                            .default(null)
                            .nullable()
                            .describe("A value on a y axis.")
                            .default(null),
                    })
                        .describe("A pair of floats typically used as a point on a 2 dimensional grid."),
                ]))
                    .describe("A list of data points. Most often a singular value such as a price."),
            })
                .describe("Represents one or more values associated with a type.\nE.g. a type of PRICE contains a single float value.\n"))
                .describe("A list of valuesMap objects."),
        })
            .describe("An object defining a temporal window and a list of valuesMaps.\nif intervalPeriod present may set temporal aspects of interval or override event.intervalPeriod.\n"))
            .describe("A list of interval objects."),
    })
        .describe("Report data associated with a resource."))
        .describe("A list of objects containing report data for a set of resources."),
})
    .describe("report object.");
//# sourceMappingURL=data:application/json;base64,