export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"openADRSchemas.js","sourceRoot":"","sources":["../../src/codegen/openADRSchemas.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Generated by @openapi-codegen\n *\n * @version 3.0.1\n */\n/**\n * Provides program specific metadata from VTN to VEN.\n */\nexport type Program = {\n  id?: ObjectID;\n  createdDateTime?: DateTime;\n  modificationDateTime?: DateTime;\n  /**\n   * Used as discriminator\n   */\n  objectType?: \"PROGRAM\";\n  /**\n   * Short name to uniquely identify program.\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example ResTOU\n   */\n  programName: string;\n  /**\n   * Long name of program for human readability.\n   *\n   * @example Residential Time of Use-A\n   * @default null\n   */\n  programLongName?: string | null;\n  /**\n   * Short name of energy retailer providing the program.\n   *\n   * @example ACME\n   * @default null\n   */\n  retailerName?: string | null;\n  /**\n   * Long name of energy retailer for human readability.\n   *\n   * @example ACME Electric Inc.\n   * @default null\n   */\n  retailerLongName?: string | null;\n  /**\n   * A program defined categorization.\n   *\n   * @example PRICING_TARIFF\n   * @default null\n   */\n  programType?: string | null;\n  /**\n   * Alpha-2 code per ISO 3166-1.\n   *\n   * @example US\n   * @default null\n   */\n  country?: string | null;\n  /**\n   * Coding per ISO 3166-2. E.g. state in US.\n   *\n   * @example CO\n   * @default null\n   */\n  principalSubdivision?: string | null;\n  timeZoneOffset?: Duration;\n  intervalPeriod?: IntervalPeriod;\n  /**\n   * A list of programDescriptions\n   *\n   * @default null\n   */\n  programDescriptions?:\n    | {\n        /**\n         * A human or machine readable program description\n         *\n         * @format uri\n         * @example www.myCorporation.com/myProgramDescription\n         */\n        URL: string;\n      }[]\n    | null;\n  /**\n   * True if events are fixed once transmitted.\n   *\n   * @example false\n   * @default null\n   */\n  bindingEvents?: boolean | null;\n  /**\n   * True if events have been adapted from a grid event.\n   *\n   * @example false\n   * @default null\n   */\n  localPrice?: boolean | null;\n  /**\n   * A list of payloadDescriptors.\n   *\n   * @default null\n   */\n  payloadDescriptors?:\n    | (EventPayloadDescriptor | ReportPayloadDescriptor)[]\n    | null;\n  /**\n   * A list of valuesMap objects.\n   *\n   * @default null\n   */\n  targets?: ValuesMap[] | null;\n};\n\n/**\n * report object.\n */\nexport type Report = {\n  id?: ObjectID;\n  createdDateTime?: DateTime;\n  modificationDateTime?: DateTime;\n  /**\n   * Used as discriminator\n   */\n  objectType?: \"REPORT\";\n  programID: ObjectID;\n  eventID: ObjectID;\n  /**\n   * User generated identifier; may be VEN ID provisioned out-of-band.\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example VEN-999\n   */\n  clientName: string;\n  /**\n   * User defined string for use in debugging or User Interface.\n   *\n   * @example Battery_usage_04112023\n   * @default null\n   */\n  reportName?: string | null;\n  /**\n   * A list of reportPayloadDescriptors.\n   *\n   * @default null\n   */\n  payloadDescriptors?: ReportPayloadDescriptor[] | null;\n  /**\n   * A list of objects containing report data for a set of resources.\n   */\n  resources: {\n    /**\n     * User generated identifier. A value of AGGREGATED_REPORT indicates an aggregation of more that one resource's data\n     *\n     * @minLength 1\n     * @maxLength 128\n     * @example RESOURCE-999\n     */\n    resourceName: string;\n    intervalPeriod?: IntervalPeriod;\n    /**\n     * A list of interval objects.\n     */\n    intervals: Interval[];\n  }[];\n};\n\n/**\n * Event object to communicate a Demand Response request to VEN.\n * If intervalPeriod is present, sets default start time and duration of intervals.\n */\nexport type Event = {\n  id?: ObjectID;\n  createdDateTime?: DateTime;\n  modificationDateTime?: DateTime;\n  /**\n   * Used as discriminator\n   */\n  objectType?: \"EVENT\";\n  programID: ObjectID;\n  /**\n   * User defined string for use in debugging or User Interface.\n   *\n   * @example price event 11-18-2022\n   * @default null\n   */\n  eventName?: string | null;\n  /**\n   * Relative priority of event. A lower number is a higher priority.\n   *\n   * @minimum 0\n   * @example 0\n   * @default null\n   */\n  priority?: number | null;\n  /**\n   * A list of valuesMap objects.\n   *\n   * @default null\n   */\n  targets?: ValuesMap[] | null;\n  /**\n   * A list of reportDescriptor objects. Used to request reports from VEN.\n   *\n   * @default null\n   */\n  reportDescriptors?: ReportDescriptor[] | null;\n  /**\n   * A list of payloadDescriptor objects.\n   *\n   * @default null\n   */\n  payloadDescriptors?: EventPayloadDescriptor[] | null;\n  intervalPeriod?: IntervalPeriod;\n  /**\n   * A list of interval objects.\n   */\n  intervals: Interval[];\n};\n\n/**\n * An object created by a client to receive notification of operations on objects.\n * Clients may subscribe to be notified when a type of object is created,\n * updated, or deleted.\n */\nexport type Subscription = {\n  id?: ObjectID;\n  createdDateTime?: DateTime;\n  modificationDateTime?: DateTime;\n  /**\n   * Used as discriminator.\n   */\n  objectType?: \"SUBSCRIPTION\";\n  /**\n   * User generated identifier, may be VEN identifier provisioned out-of-band.\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example VEN-999\n   */\n  clientName: string;\n  programID: ObjectID;\n  /**\n   * list of objects and operations to subscribe to.\n   */\n  objectOperations: {\n    /**\n     * list of objects to subscribe to.\n     */\n    objects: ObjectTypes[];\n    /**\n     * list of operations to subscribe to.\n     */\n    operations: (\"GET\" | \"POST\" | \"PUT\" | \"DELETE\")[];\n    /**\n     * User provided webhook URL.\n     *\n     * @format uri\n     * @example https://myserver.com/send/callback/here\n     */\n    callbackUrl: string;\n    /**\n     * User provided token.\n     * To avoid custom integrations, callback endpoints\n     * should accept the provided bearer token to authenticate VTN requests.\n     *\n     * @example NCEJGI9E8ER9802UT9HUG\n     * @default null\n     */\n    bearerToken?: string | null;\n  }[];\n  /**\n   * A list of valuesMap objects. Used by server to filter callbacks.\n   *\n   * @default null\n   */\n  targets?: ValuesMap[] | null;\n};\n\n/**\n * Ven represents a client with the ven role.\n */\nexport type Ven = {\n  id?: ObjectID;\n  createdDateTime?: DateTime;\n  modificationDateTime?: DateTime;\n  /**\n   * Used as discriminator.\n   */\n  objectType?: \"VEN\";\n  /**\n   * User generated identifier, may be VEN identifier provisioned out-of-band.\n   * venName is expected to be unqiue within the scope of a VTN\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example VEN-999\n   */\n  venName: string;\n  /**\n   * A list of valuesMap objects describing attributes.\n   *\n   * @default null\n   */\n  attributes?: ValuesMap[] | null;\n  /**\n   * A list of valuesMap objects describing target criteria.\n   *\n   * @default null\n   */\n  targets?: ValuesMap[] | null;\n  /**\n   * A list of resource objects representing end-devices or systems.\n   *\n   * @default null\n   */\n  resources?: Resource[] | null;\n};\n\n/**\n * A resource is an energy device or system subject to control by a VEN.\n */\nexport type Resource = {\n  id?: ObjectID;\n  createdDateTime?: DateTime;\n  modificationDateTime?: DateTime;\n  /**\n   * Used as discriminator.\n   */\n  objectType?: \"RESOURCE\";\n  /**\n   * User generated identifier, resource may be configured with identifier out-of-band.\n   * resourceName is expected to be unique within the scope of the associated VEN.\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example RESOURCE-999\n   */\n  resourceName: string;\n  venID?: ObjectID;\n  /**\n   * A list of valuesMap objects describing attributes.\n   *\n   * @default null\n   */\n  attributes?: ValuesMap[] | null;\n  /**\n   * A list of valuesMap objects describing target criteria.\n   *\n   * @default null\n   */\n  targets?: ValuesMap[] | null;\n};\n\n/**\n * An object defining a temporal window and a list of valuesMaps.\n * if intervalPeriod present may set temporal aspects of interval or override event.intervalPeriod.\n */\nexport type Interval = {\n  /**\n   * A client generated number assigned an interval object. Not a sequence number.\n   *\n   * @format int32\n   * @example 0\n   */\n  id: number;\n  intervalPeriod?: IntervalPeriod;\n  /**\n   * A list of valuesMap objects.\n   */\n  payloads: ValuesMap[];\n};\n\n/**\n * Defines temporal aspects of intervals.\n * A duration of default PT0S indicates instantaneous or infinity, depending on payloadType.\n * A randomizeStart of default null indicates no randomization.\n */\nexport type IntervalPeriod = {\n  start: DateTime;\n  duration?: Duration;\n  randomizeStart?: Duration;\n};\n\n/**\n * Represents one or more values associated with a type.\n * E.g. a type of PRICE contains a single float value.\n */\nexport type ValuesMap = {\n  /**\n   * Enumerated or private string signifying the nature of values.\n   * E.G. \"PRICE\" indicates value is to be interpreted as a currency.\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example PRICE\n   */\n  type: string;\n  /**\n   * A list of data points. Most often a singular value such as a price.\n   *\n   * @example 0.17\n   */\n  values: (number | number | string | boolean | Point)[];\n};\n\n/**\n * A pair of floats typically used as a point on a 2 dimensional grid.\n */\nexport type Point = {\n  /**\n   * A value on an x axis.\n   *\n   * @format float\n   * @example 1\n   */\n  x: number;\n  /**\n   * A value on a y axis.\n   *\n   * @format float\n   * @example 2\n   */\n  y: number;\n};\n\n/**\n * Contextual information used to interpret event valuesMap values.\n * E.g. a PRICE payload simply contains a price value, an\n * associated descriptor provides necessary context such as units and currency.\n */\nexport type EventPayloadDescriptor = {\n  /**\n   * Used as discriminator.\n   */\n  objectType?: \"EVENT_PAYLOAD_DESCRIPTOR\";\n  /**\n   * Enumerated or private string signifying the nature of values.\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example PRICE\n   */\n  payloadType: string;\n  /**\n   * Units of measure.\n   *\n   * @example KWH\n   * @default null\n   */\n  units?: string | null;\n  /**\n   * Currency of price payload.\n   *\n   * @example USD\n   * @default null\n   */\n  currency?: string | null;\n};\n\n/**\n * Contextual information used to interpret report payload values.\n * E.g. a USAGE payload simply contains a usage value, an\n * associated descriptor provides necessary context such as units and data quality.\n */\nexport type ReportPayloadDescriptor = {\n  /**\n   * Used as discriminator.\n   */\n  objectType?: \"REPORT_PAYLOAD_DESCRIPTOR\";\n  /**\n   * Enumerated or private string signifying the nature of values.\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example USAGE\n   */\n  payloadType: string;\n  /**\n   * Enumerated or private string signifying the type of reading.\n   *\n   * @example DIRECT_READ\n   * @default null\n   */\n  readingType?: string | null;\n  /**\n   * Units of measure.\n   *\n   * @example KWH\n   * @default null\n   */\n  units?: string | null;\n  /**\n   * A quantification of the accuracy of a set of payload values.\n   *\n   * @format float\n   * @example 0\n   * @default null\n   */\n  accuracy?: number | null;\n  /**\n   * A quantification of the confidence in a set of payload values.\n   *\n   * @format int32\n   * @minimum 0\n   * @maximum 100\n   * @example 100\n   * @default null\n   */\n  confidence?: number | null;\n};\n\n/**\n * An object that may be used to request a report from a VEN.\n */\nexport type ReportDescriptor = {\n  /**\n   * Enumerated or private string signifying the nature of values.\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example USAGE\n   */\n  payloadType: string;\n  /**\n   * Enumerated or private string signifying the type of reading.\n   *\n   * @example DIRECT_READ\n   * @default null\n   */\n  readingType?: string | null;\n  /**\n   * Units of measure.\n   *\n   * @example KWH\n   * @default null\n   */\n  units?: string | null;\n  /**\n   * A list of valuesMap objects.\n   *\n   * @default null\n   */\n  targets?: ValuesMap[] | null;\n  /**\n   * True if report should aggregate results from all targeted resources.\n   * False if report includes results for each resource.\n   *\n   * @example false\n   * @default false\n   */\n  aggregate?: boolean;\n  /**\n   * The interval on which to generate a report.\n   * -1 indicates generate report at end of last interval.\n   *\n   * @format int32\n   * @example -1\n   * @default -1\n   */\n  startInterval?: number;\n  /**\n   * The number of intervals to include in a report.\n   * -1 indicates that all intervals are to be included.\n   *\n   * @format int32\n   * @example -1\n   * @default -1\n   */\n  numIntervals?: number;\n  /**\n   * True indicates report on intervals preceding startInterval.\n   * False indicates report on intervals following startInterval (e.g. forecast).\n   *\n   * @example true\n   * @default true\n   */\n  historical?: boolean;\n  /**\n   * Number of intervals that elapse between reports.\n   * -1 indicates same as numIntervals.\n   *\n   * @format int32\n   * @example -1\n   * @default -1\n   */\n  frequency?: number;\n  /**\n   * Number of times to repeat report.\n   * 1 indicates generate one report.\n   * -1 indicates repeat indefinitely.\n   *\n   * @format int32\n   * @example 1\n   * @default 1\n   */\n  repeat?: number;\n};\n\n/**\n * URL safe VTN assigned object ID.\n *\n * @pattern ^[a-zA-Z0-9_-]*$\n * @minLength 1\n * @maxLength 128\n * @example object-999\n */\nexport type ObjectID = string;\n\n/**\n * VTN generated object included in request to subscription callbackUrl.\n */\nexport type Notification = {\n  objectType: ObjectTypes;\n  /**\n   * the operation on on object that triggered the notification.\n   *\n   * @example POST\n   */\n  operation: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\";\n  /**\n   * the object that is the subject of the notification.\n   *\n   * @example {}\n   */\n  object: Program | Report | Event | Subscription | Ven | Resource;\n  /**\n   * A list of valuesMap objects.\n   *\n   * @default null\n   */\n  targets?: ValuesMap[] | null;\n};\n\n/**\n * Types of objects addressable through API.\n *\n * @example EVENT\n */\nexport type ObjectTypes =\n  | \"PROGRAM\"\n  | \"EVENT\"\n  | \"REPORT\"\n  | \"SUBSCRIPTION\"\n  | \"VEN\"\n  | \"RESOURCE\";\n\n/**\n * datetime in ISO 8601 format\n *\n * @format date-time\n * @example \"2023-06-15T09:30:00.000Z\"\n */\nexport type DateTime = string;\n\n/**\n * duration in ISO 8601 format\n *\n * @pattern ^(-?)P(?=\\d|T\\d)(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)([DW]))?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$\n * @example PT1H\n * @default PT0S\n */\nexport type Duration = string;\n\n/**\n * Body of POST request to /auth/token.\n */\nexport type ClientCredentialRequest = {\n  /**\n   * OAuth2 grant type, must be 'client_credentials'\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example client_credentials\n   */\n  grant_type?: \"client_credentials\";\n  /**\n   * client ID to exchange for bearer token.\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example ven_client_99\n   */\n  clientID: string;\n  /**\n   * client secret to exchange for bearer token.\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example ven_secret_99\n   */\n  clientSecret: string;\n  /**\n   * application defined scope.\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example read_all\n   */\n  scope?: string;\n};\n\n/**\n * Body response from /auth/token.\n */\nexport type ClientCredentialResponse = {\n  /**\n   * access token povided by Authorization service\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3\n   */\n  access_token: string;\n  /**\n   * token type, must be Bearer.\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example Bearer\n   */\n  token_type?: \"Bearer\";\n  /**\n   * expiration period in seconds.\n   *\n   * @example 3600\n   */\n  expires_in?: number;\n  /**\n   * refresh token povided by Authorization service\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk\n   */\n  refresh_token?: string;\n  /**\n   * application defined scope.\n   *\n   * @minLength 1\n   * @maxLength 128\n   * @example read_all\n   */\n  scope?: string;\n};\n\n/**\n * reusable error response. From https://opensource.zalando.com/problem/schema.yaml.\n */\nexport type Problem = {\n  /**\n   * An absolute URI that identifies the problem type.\n   * When dereferenced, it SHOULD provide human-readable documentation for the problem type\n   * (e.g., using HTML).\n   *\n   * @format uri\n   * @default about:blank\n   * @example https://zalando.github.io/problem/constraint-violation\n   */\n  type?: string;\n  /**\n   * A short, summary of the problem type. Written in english and readable\n   * for engineers (usually not suited for non technical stakeholders and\n   * not localized); example: Service Unavailable.\n   */\n  title?: string;\n  /**\n   * The HTTP status code generated by the origin server for this occurrence\n   * of the problem.\n   *\n   * @format int32\n   * @minimum 100\n   * @maximum 600\n   * @exclusiveMaximum true\n   * @example 503\n   */\n  status?: number;\n  /**\n   * A human readable explanation specific to this occurrence of the\n   * problem.\n   *\n   * @example Connection to database timed out\n   */\n  detail?: string;\n  /**\n   * An absolute URI that identifies the specific occurrence of the problem.\n   * It may or may not yield further information if dereferenced.\n   *\n   * @format uri\n   */\n  instance?: string;\n};\n"]}