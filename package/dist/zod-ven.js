"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const zod_1 = require("zod");
exports.default = zod_1.z
    .object({
    id: zod_1.z
        .string()
        .regex(new RegExp("^[a-zA-Z0-9_-]*$"))
        .min(1)
        .max(128)
        .describe("URL safe VTN assigned object ID.")
        .optional(),
    createdDateTime: zod_1.z
        .string()
        .datetime()
        .describe("datetime in ISO 8601 format")
        .default("0000-00-00"),
    modificationDateTime: zod_1.z
        .string()
        .datetime()
        .describe("datetime in ISO 8601 format")
        .default("0000-00-00"),
    objectType: zod_1.z
        .literal("VEN")
        .describe("Used as discriminator, e.g. notification.object.")
        .optional(),
    venName: zod_1.z
        .string()
        .min(1)
        .max(128)
        .describe("User generated identifier, may be VEN identifier provisioned during program enrollment."),
    attributes: zod_1.z
        .array(zod_1.z
        .object({
        type: zod_1.z
            .string()
            .min(1)
            .max(128)
            .describe('Enumerated or private string signifying the nature of values.\nE.G. "PRICE" indicates value is to be interpreted as a currency.\n'),
        values: zod_1.z
            .array(zod_1.z.union([
            zod_1.z.number(),
            zod_1.z.number().int(),
            zod_1.z.string(),
            zod_1.z.boolean(),
            zod_1.z
                .object({
                x: zod_1.z
                    .number()
                    .describe("A value on an x axis.")
                    .default(null)
                    .nullable()
                    .describe("A value on an x axis.")
                    .default(null),
                y: zod_1.z
                    .number()
                    .describe("A value on a y axis.")
                    .default(null)
                    .nullable()
                    .describe("A value on a y axis.")
                    .default(null),
            })
                .describe("A pair of floats typically used as a point on a 2 dimensional grid."),
        ]))
            .describe("A list of data points. Most often a singular value such as a price."),
    })
        .describe("Represents one or more values associated with a type.\nE.g. a type of PRICE contains a single float value.\n"))
        .describe("A list of valuesMap objects describing attributes.")
        .optional(),
    targets: zod_1.z
        .array(zod_1.z
        .object({
        type: zod_1.z
            .string()
            .min(1)
            .max(128)
            .describe('Enumerated or private string signifying the nature of values.\nE.G. "PRICE" indicates value is to be interpreted as a currency.\n'),
        values: zod_1.z
            .array(zod_1.z.union([
            zod_1.z.number(),
            zod_1.z.number().int(),
            zod_1.z.string(),
            zod_1.z.boolean(),
            zod_1.z
                .object({
                x: zod_1.z
                    .number()
                    .describe("A value on an x axis.")
                    .default(null)
                    .nullable()
                    .describe("A value on an x axis.")
                    .default(null),
                y: zod_1.z
                    .number()
                    .describe("A value on a y axis.")
                    .default(null)
                    .nullable()
                    .describe("A value on a y axis.")
                    .default(null),
            })
                .describe("A pair of floats typically used as a point on a 2 dimensional grid."),
        ]))
            .describe("A list of data points. Most often a singular value such as a price."),
    })
        .describe("Represents one or more values associated with a type.\nE.g. a type of PRICE contains a single float value.\n"))
        .describe("A list of valuesMap objects describing target criteria.")
        .optional(),
    resources: zod_1.z
        .array(zod_1.z
        .object({
        id: zod_1.z
            .string()
            .regex(new RegExp("^[a-zA-Z0-9_-]*$"))
            .min(1)
            .max(128)
            .describe("URL safe VTN assigned object ID.")
            .optional(),
        createdDateTime: zod_1.z
            .string()
            .datetime()
            .describe("datetime in ISO 8601 format")
            .default("0000-00-00"),
        modificationDateTime: zod_1.z
            .string()
            .datetime()
            .describe("datetime in ISO 8601 format")
            .default("0000-00-00"),
        objectType: zod_1.z
            .literal("RESOURCE")
            .describe("Used as discriminator, e.g. notification.object")
            .optional(),
        resourceName: zod_1.z
            .string()
            .min(1)
            .max(128)
            .describe("User generated identifier, resource may be configured with identifier out-of-band."),
        venID: zod_1.z
            .string()
            .regex(new RegExp("^[a-zA-Z0-9_-]*$"))
            .min(1)
            .max(128)
            .describe("URL safe VTN assigned object ID.")
            .optional(),
        attributes: zod_1.z
            .array(zod_1.z
            .object({
            type: zod_1.z
                .string()
                .min(1)
                .max(128)
                .describe('Enumerated or private string signifying the nature of values.\nE.G. "PRICE" indicates value is to be interpreted as a currency.\n'),
            values: zod_1.z
                .array(zod_1.z.union([
                zod_1.z.number(),
                zod_1.z.number().int(),
                zod_1.z.string(),
                zod_1.z.boolean(),
                zod_1.z
                    .object({
                    x: zod_1.z
                        .number()
                        .describe("A value on an x axis.")
                        .default(null)
                        .nullable()
                        .describe("A value on an x axis.")
                        .default(null),
                    y: zod_1.z
                        .number()
                        .describe("A value on a y axis.")
                        .default(null)
                        .nullable()
                        .describe("A value on a y axis.")
                        .default(null),
                })
                    .describe("A pair of floats typically used as a point on a 2 dimensional grid."),
            ]))
                .describe("A list of data points. Most often a singular value such as a price."),
        })
            .describe("Represents one or more values associated with a type.\nE.g. a type of PRICE contains a single float value.\n"))
            .describe("A list of valuesMap objects describing attributes.")
            .optional(),
        targets: zod_1.z
            .array(zod_1.z
            .object({
            type: zod_1.z
                .string()
                .min(1)
                .max(128)
                .describe('Enumerated or private string signifying the nature of values.\nE.G. "PRICE" indicates value is to be interpreted as a currency.\n'),
            values: zod_1.z
                .array(zod_1.z.union([
                zod_1.z.number(),
                zod_1.z.number().int(),
                zod_1.z.string(),
                zod_1.z.boolean(),
                zod_1.z
                    .object({
                    x: zod_1.z
                        .number()
                        .describe("A value on an x axis.")
                        .default(null)
                        .nullable()
                        .describe("A value on an x axis.")
                        .default(null),
                    y: zod_1.z
                        .number()
                        .describe("A value on a y axis.")
                        .default(null)
                        .nullable()
                        .describe("A value on a y axis.")
                        .default(null),
                })
                    .describe("A pair of floats typically used as a point on a 2 dimensional grid."),
            ]))
                .describe("A list of data points. Most often a singular value such as a price."),
        })
            .describe("Represents one or more values associated with a type.\nE.g. a type of PRICE contains a single float value.\n"))
            .describe("A list of valuesMap objects describing target criteria.")
            .optional(),
    })
        .describe("A resource is an energy device or system subject to control by a VEN.\n"))
        .describe("A list of resource objects representing end-devices or systems.")
        .default(null)
        .nullable()
        .describe("A list of resource objects representing end-devices or systems.")
        .default(null),
})
    .describe("Ven represents a client with the ven role.");
//# sourceMappingURL=data:application/json;base64,