// Generated by ts-to-zod
import { z } from "zod";

export const objectIDSchema = z
  .string()
  .min(1)
  .max(128)
  .regex(/^[a-zA-Z0-9_-]*$/);

export const dateTimeSchema = z.string().datetime().default("0000-00-00");

export const durationSchema = z
  .string()
  .regex(
    /^(-?)P(?=\d|T\d)(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)([DW]))?(?:T(?:(\d+)H)?(?:(\d+)M)?(?:(\d+(?:\.\d+)?)S)?)?$/,
  )
  .default("PT0S");

export const intervalPeriodSchema = z.object({
  start: dateTimeSchema,
  duration: durationSchema.optional(),
  randomizeStart: durationSchema.optional(),
});

export const objectTypesSchema = z.union([
  z.literal("PROGRAM"),
  z.literal("EVENT"),
  z.literal("REPORT"),
  z.literal("SUBSCRIPTION"),
  z.literal("VEN"),
  z.literal("RESOURCE"),
]);

export const pointSchema = z.object({
  x: z.number().nullable().default(null),
  y: z.number().nullable().default(null),
});

export const eventPayloadDescriptorSchema = z.object({
  objectType: z.string().optional().default("EVENT_PAYLOAD_DESCRIPTOR"),
  payloadType: z.string().min(1).max(128),
  units: z.string().optional().nullable().default(null),
  currency: z.string().optional().nullable().default(null),
});

export const reportPayloadDescriptorSchema = z.object({
  objectType: z.string().optional().default("REPORT_PAYLOAD_DESCRIPTOR"),
  payloadType: z.string().min(1).max(128),
  readingType: z.string().optional().nullable().default(null),
  units: z.string().optional().nullable().default(null),
  accuracy: z.number().optional().nullable().default(null),
  confidence: z.number().min(0).max(100).optional().default(100),
});

export const problemSchema = z.object({
  type: z.string().optional().default("about:blank"),
  title: z.string().optional(),
  status: z.number().min(100).max(600).optional(),
  detail: z.string().optional(),
  instance: z.string().optional(),
});

export const valuesMapSchema = z.object({
  type: z.string().min(1).max(128),
  values: z.array(
    z.union([z.number(), z.number(), z.string(), z.boolean(), pointSchema]),
  ),
});

export const resourceSchema = z.object({
  id: objectIDSchema.optional(),
  createdDateTime: dateTimeSchema.optional(),
  modificationDateTime: dateTimeSchema.optional(),
  objectType: z.literal("RESOURCE").optional(),
  resourceName: z.string().min(1).max(128),
  venID: objectIDSchema.optional(),
  attributes: z.array(valuesMapSchema).optional(),
  targets: z.array(valuesMapSchema).optional(),
});

export const reportDescriptorSchema = z.object({
  payloadType: z.string().min(1).max(128),
  readingType: z.string().optional().nullable().default(null),
  units: z.string().optional().nullable().default(null),
  targets: z.array(valuesMapSchema).optional().nullable().default(null),
  aggregate: z.boolean().optional().default(false),
  startInterval: z.number().optional().default(-1),
  numIntervals: z.number().optional().default(-1),
  historical: z.boolean().optional().default(true),
  frequency: z.number().optional().default(-1),
  repeat: z.number().optional().default(1),
});

export const programSchema = z.object({
  id: objectIDSchema.optional(),
  createdDateTime: dateTimeSchema.optional(),
  modificationDateTime: dateTimeSchema.optional(),
  objectType: z.literal("PROGRAM").optional(),
  programName: z.string().min(1).max(128),
  programLongName: z.string().optional().nullable().default(null),
  retailerName: z.string().optional().nullable().default(null),
  retailerLongName: z.string().optional().nullable().default(null),
  programType: z.string().optional().nullable().default(null),
  country: z.string().optional().nullable().default(null),
  principalSubdivision: z.string().optional().nullable().default(null),
  timeZoneOffset: durationSchema.optional(),
  intervalPeriod: intervalPeriodSchema.optional(),
  programDescriptions: z
    .array(
      z.object({
        URL: z.string(),
      }),
    )
    .optional()
    .nullable()
    .default(null),
  bindingEvents: z.boolean().optional().default(false),
  localPrice: z.boolean().optional().default(false),
  payloadDescriptors: z
    .array(
      z.union([eventPayloadDescriptorSchema, reportPayloadDescriptorSchema]),
    )
    .optional()
    .nullable()
    .default(null),
  targets: z.array(valuesMapSchema).optional().nullable().default(null),
});

export const intervalSchema = z.object({
  id: z.number(),
  intervalPeriod: intervalPeriodSchema.optional(),
  payloads: z.array(valuesMapSchema),
});

export const eventSchema = z.object({
  id: objectIDSchema.optional(),
  createdDateTime: dateTimeSchema.optional(),
  modificationDateTime: dateTimeSchema.optional(),
  objectType: z.literal("EVENT").optional(),
  programID: objectIDSchema,
  eventName: z.string().optional().nullable().default(null),
  priority: z.number().min(0).optional().nullable().default(null),
  targets: z.array(valuesMapSchema).optional().nullable().default(null),
  reportDescriptors: z
    .array(reportDescriptorSchema)
    .optional()
    .nullable()
    .default(null),
  payloadDescriptors: z
    .array(eventPayloadDescriptorSchema)
    .optional()
    .nullable()
    .default(null),
  intervalPeriod: intervalPeriodSchema.optional(),
  intervals: z.array(intervalSchema),
});

export const subscriptionSchema = z.object({
  id: objectIDSchema.optional(),
  createdDateTime: dateTimeSchema.optional(),
  modificationDateTime: dateTimeSchema.optional(),
  objectType: z.literal("SUBSCRIPTION").optional(),
  clientName: z.string().min(1).max(128),
  programID: objectIDSchema,
  objectOperations: z.array(
    z.object({
      objects: z.array(objectTypesSchema),
      operations: z.array(
        z.union([
          z.literal("GET"),
          z.literal("POST"),
          z.literal("PUT"),
          z.literal("DELETE"),
        ]),
      ),
      callbackUrl: z.string(),
      bearerToken: z.string().optional().nullable().default(null),
    }),
  ),
  targets: z.array(valuesMapSchema).optional().nullable().default(null),
});

export const venSchema = z.object({
  id: objectIDSchema.optional(),
  createdDateTime: dateTimeSchema.optional(),
  modificationDateTime: dateTimeSchema.optional(),
  objectType: z.literal("VEN").optional(),
  venName: z.string().min(1).max(128),
  attributes: z.array(valuesMapSchema).optional(),
  targets: z.array(valuesMapSchema).optional(),
  resources: z.array(resourceSchema).optional().nullable().default(null),
});

export const reportSchema = z.object({
  id: objectIDSchema.optional(),
  createdDateTime: dateTimeSchema.optional(),
  modificationDateTime: dateTimeSchema.optional(),
  objectType: z.literal("REPORT").optional(),
  programID: objectIDSchema,
  eventID: objectIDSchema,
  clientName: z.string().min(1).max(128),
  reportName: z.string().optional().nullable().default(null),
  payloadDescriptors: z
    .array(reportPayloadDescriptorSchema)
    .optional()
    .nullable()
    .default(null),
  resources: z.array(
    z.object({
      resourceName: z.string().min(1).max(128),
      intervalPeriod: intervalPeriodSchema.optional(),
      intervals: z.array(intervalSchema),
    }),
  ),
});

export const notificationSchema = z.object({
  objectType: objectTypesSchema,
  operation: z.union([
    z.literal("GET"),
    z.literal("POST"),
    z.literal("PUT"),
    z.literal("DELETE"),
  ]),
  targets: z.array(valuesMapSchema).optional().nullable().default(null),
  object: z.union([
    programSchema,
    reportSchema,
    eventSchema,
    subscriptionSchema,
    venSchema,
    resourceSchema,
  ]),
});
