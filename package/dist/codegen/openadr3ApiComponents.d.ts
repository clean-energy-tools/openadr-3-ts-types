/**
 * Generated by @openapi-codegen
 *
 * @version 3.0.1
 */
import type * as Schemas from "./openADRSchemas.js";
export type SearchAllProgramsQueryParams = {
    /**
     * Indicates targeting type, e.g. GROUP
     */
    targetType?: string;
    /**
     * List of target values, e.g. group names
     */
    targetValues?: string[];
    /**
     * number of records to skip for pagination.
     *
     * @format int32
     * @minimum 0
     */
    skip?: number;
    /**
     * maximum number of records to return.
     *
     * @format int32
     * @maximum 50
     * @minimum 0
     */
    limit?: number;
};
export type SearchAllProgramsResponse = Schemas.Program[];
export type SearchAllProgramsVariables = {
    queryParams?: SearchAllProgramsQueryParams;
};
/**
 * List all programs known to the server.
 * Use skip and pagination query params to limit response size.
 */
export type CreateProgramVariables = {
    body: Schemas.Program;
};
/**
 * Create a new program in the server.
 */
export type SearchProgramByProgramIdPathParams = {
    /**
     * Object ID of the program object.
     */
    programID: Schemas.ObjectID;
};
export type SearchProgramByProgramIdVariables = {
    pathParams: SearchProgramByProgramIdPathParams;
};
/**
 * Fetch the program specified by the programID in path.
 */
export type UpdateProgramPathParams = {
    /**
     * Object ID of the program object.
     */
    programID: Schemas.ObjectID;
};
export type UpdateProgramVariables = {
    body: Schemas.Program;
    pathParams: UpdateProgramPathParams;
};
/**
 * Update an existing program with the programID in path.
 */
export type DeleteProgramPathParams = {
    /**
     * Object ID of the program object.
     */
    programID: Schemas.ObjectID;
};
export type DeleteProgramVariables = {
    pathParams: DeleteProgramPathParams;
};
/**
 * Delete an existing program with the programID in path.
 */
export type SearchAllReportsQueryParams = {
    /**
     * filter results to reports with programID.
     */
    programID?: Schemas.ObjectID;
    /**
     * filter results to reports with clientName.
     */
    clientName?: string;
    /**
     * number of records to skip for pagination.
     *
     * @format int32
     * @minimum 0
     */
    skip?: number;
    /**
     * maximum number of records to return.
     *
     * @format int32
     * @maximum 50
     * @minimum 0
     */
    limit?: number;
};
export type SearchAllReportsResponse = Schemas.Report[];
export type SearchAllReportsVariables = {
    queryParams?: SearchAllReportsQueryParams;
};
/**
 * List all reports known to the server.
 * May filter results by programID and clientName as query param.
 * Use skip and pagination query params to limit response size.
 */
export type CreateReportVariables = {
    body: Schemas.Report;
};
/**
 * Create a new report in the server.
 */
export type SearchReportsByReportIDPathParams = {
    /**
     * object ID of a report.
     */
    reportID: Schemas.ObjectID;
};
export type SearchReportsByReportIDVariables = {
    pathParams: SearchReportsByReportIDPathParams;
};
/**
 * Fetch the report specified by the reportID in path.
 */
export type UpdateReportPathParams = {
    /**
     * object ID of a report.
     */
    reportID: Schemas.ObjectID;
};
export type UpdateReportVariables = {
    body: Schemas.Report;
    pathParams: UpdateReportPathParams;
};
/**
 * Update the report specified by the reportID in path.
 */
export type DeleteReportPathParams = {
    /**
     * object ID of a report.
     */
    reportID: Schemas.ObjectID;
};
export type DeleteReportVariables = {
    pathParams: DeleteReportPathParams;
};
/**
 * Delete the program specified by the reportID in path.
 */
export type SearchAllEventsQueryParams = {
    /**
     * filter results to events with programID.
     */
    programID?: Schemas.ObjectID;
    /**
     * Indicates targeting type, e.g. GROUP
     */
    targetType?: string;
    /**
     * List of target values, e.g. group names
     */
    targetValues?: string[];
    /**
     * number of records to skip for pagination.
     *
     * @format int32
     * @minimum 0
     */
    skip?: number;
    /**
     * maximum number of records to return.
     *
     * @format int32
     * @maximum 50
     * @minimum 0
     */
    limit?: number;
};
export type SearchAllEventsResponse = Schemas.Event[];
export type SearchAllEventsVariables = {
    queryParams?: SearchAllEventsQueryParams;
};
/**
 * List all events known to the server. May filter results by programID query param.
 * Use skip and pagination query params to limit response size.
 */
export type CreateEventVariables = {
    body: Schemas.Event;
};
/**
 * Create a new event in the server.
 */
export type SearchEventsByIDPathParams = {
    /**
     * object ID of event.
     */
    eventID: Schemas.ObjectID;
};
export type SearchEventsByIDVariables = {
    pathParams: SearchEventsByIDPathParams;
};
/**
 * Fetch event associated with the eventID in path.
 */
export type UpdateEventPathParams = {
    /**
     * object ID of event.
     */
    eventID: Schemas.ObjectID;
};
export type UpdateEventVariables = {
    body: Schemas.Event;
    pathParams: UpdateEventPathParams;
};
/**
 * Update the event specified by the eventID in path.
 */
export type DeleteEventPathParams = {
    /**
     * object ID of event.
     */
    eventID: Schemas.ObjectID;
};
export type DeleteEventVariables = {
    pathParams: DeleteEventPathParams;
};
/**
 * Delete the event specified by the eventID in path.
 */
export type SearchSubscriptionsQueryParams = {
    /**
     * filter results to subscriptions with programID.
     */
    programID?: Schemas.ObjectID;
    /**
     * filter results to subscriptions with clientName.
     */
    clientName?: string;
    /**
     * Indicates targeting type, e.g. GROUP
     */
    targetType?: string;
    /**
     * List of target values, e.g. group names
     */
    targetValues?: string[];
    /**
     * list of objects to subscribe to.
     */
    objects?: Schemas.ObjectTypes[];
    /**
     * number of records to skip for pagination.
     *
     * @minimum 0
     * @format int32
     */
    skip?: number;
    /**
     * maximum number of records to return.
     *
     * @maximum 50
     * @minimum 0
     * @format int32
     */
    limit?: number;
};
export type SearchSubscriptionsResponse = Schemas.Subscription[];
export type SearchSubscriptionsVariables = {
    queryParams?: SearchSubscriptionsQueryParams;
};
/**
 * List all subscriptions.
 * May filter results by programID and clientID as query params.
 * May filter results by objects as query param. See objectTypes schema.
 * Use skip and pagination query params to limit response size.
 */
export type CreateSubscriptionVariables = {
    body: Schemas.Subscription;
};
/**
 * Create a new subscription.
 */
export type SearchSubscriptionByIDPathParams = {
    /**
     * object ID of the associated subscription.
     */
    subscriptionID: Schemas.ObjectID;
};
export type SearchSubscriptionByIDVariables = {
    pathParams: SearchSubscriptionByIDPathParams;
};
/**
 * Return the subscription specified by subscriptionID specified in path.
 */
export type UpdateSubscriptionPathParams = {
    /**
     * object ID of the associated subscription.
     */
    subscriptionID: Schemas.ObjectID;
};
export type UpdateSubscriptionVariables = {
    body: Schemas.Subscription;
    pathParams: UpdateSubscriptionPathParams;
};
/**
 * Update the subscription specified by subscriptionID specified in path.
 */
export type DeleteSubscriptionPathParams = {
    /**
     * object ID of the associated subscription.
     */
    subscriptionID: Schemas.ObjectID;
};
export type DeleteSubscriptionVariables = {
    pathParams: DeleteSubscriptionPathParams;
};
/**
 * Delete the subscription specified by subscriptionID specified in path.
 */
export type SearchVensQueryParams = {
    /**
     * Indicates targeting type, e.g. GROUP
     */
    targetType?: string;
    /**
     * List of target values, e.g. group names
     */
    targetValues?: string[];
    /**
     * number of records to skip for pagination.
     *
     * @minimum 0
     * @format int32
     */
    skip?: number;
    /**
     * maximum number of records to return.
     *
     * @maximum 50
     * @minimum 0
     * @format int32
     */
    limit?: number;
};
export type SearchVensResponse = Schemas.Ven[];
export type SearchVensVariables = {
    queryParams?: SearchVensQueryParams;
};
/**
 * List all vens.
 * Use skip and pagination query params to limit response size.
 */
export type CreateVenVariables = {
    body: Schemas.Ven;
};
/**
 * Create a new ven.
 */
export type SearchVenByIDPathParams = {
    /**
     * object ID of ven.
     */
    venID: Schemas.ObjectID;
};
export type SearchVenByIDVariables = {
    pathParams: SearchVenByIDPathParams;
};
/**
 * Return the ven specified by venID specified in path.
 */
export type UpdateVenPathParams = {
    /**
     * object ID of ven.
     */
    venID: Schemas.ObjectID;
};
export type UpdateVenVariables = {
    body: Schemas.Ven;
    pathParams: UpdateVenPathParams;
};
/**
 * Update the ven specified by venID specified in path.
 */
export type DeleteVenPathParams = {
    /**
     * object ID of ven.
     */
    venID: Schemas.ObjectID;
};
export type DeleteVenVariables = {
    pathParams: DeleteVenPathParams;
};
/**
 * Delete the ven specified by venID specified in path.
 */
export type SearchVenResourcesPathParams = {
    /**
     * Numeric ID of ven.
     */
    venID: Schemas.ObjectID;
};
export type SearchVenResourcesQueryParams = {
    /**
     * Indicates targeting type, e.g. GROUP
     */
    targetType?: string;
    /**
     * List of target values, e.g. group names
     */
    targetValues?: string[];
    /**
     * number of records to skip for pagination.
     *
     * @minimum 0
     * @format int32
     */
    skip?: number;
    /**
     * maximum number of records to return.
     *
     * @maximum 50
     * @minimum 0
     * @format int32
     */
    limit?: number;
};
export type SearchVenResourcesResponse = Schemas.Resource[];
export type SearchVenResourcesVariables = {
    pathParams: SearchVenResourcesPathParams;
    queryParams?: SearchVenResourcesQueryParams;
};
/**
 * Return the ven resources specified by venID specified in path.
 */
export type CreateResourcePathParams = {
    /**
     * Numeric ID of ven.
     */
    venID: Schemas.ObjectID;
};
export type CreateResourceVariables = {
    body: Schemas.Resource;
    pathParams: CreateResourcePathParams;
};
/**
 * Create a new resource.
 */
export type SearchVenResourceByIDPathParams = {
    /**
     * object ID of the associated ven.
     */
    venID: Schemas.ObjectID;
    /**
     * object ID of the resource.
     */
    resourceID: Schemas.ObjectID;
};
export type SearchVenResourceByIDVariables = {
    pathParams: SearchVenResourceByIDPathParams;
};
/**
 * Return the ven resource specified by venID and resourceID specified in path.
 */
export type UpdateVenResourcePathParams = {
    /**
     * object ID of the associated ven.
     */
    venID: Schemas.ObjectID;
    /**
     * object ID of the resource.
     */
    resourceID: Schemas.ObjectID;
};
export type UpdateVenResourceVariables = {
    body: Schemas.Resource;
    pathParams: UpdateVenResourcePathParams;
};
/**
 * Update the ven resource specified by venID and resourceID specified in path.
 */
export type DeleteVenResourcePathParams = {
    /**
     * object ID of the associated ven.
     */
    venID: Schemas.ObjectID;
    /**
     * object ID of the resource.
     */
    resourceID: Schemas.ObjectID;
};
export type DeleteVenResourceVariables = {
    pathParams: DeleteVenResourcePathParams;
};
/**
 * Delete the ven resource specified by venID and resourceID specified in path.
 */
export type FetchTokenHeaders = {
    /**
     * client ID to exchange for bearer token.
     *
     * @example ven_client_99
     */
    clientID: string;
    /**
     * client secret to exchange for bearer token.
     *
     * @example ven_secret_99
     */
    clientSecret: string;
};
export type FetchTokenVariables = {
    headers: FetchTokenHeaders;
};
/**
 * Return an access token based on clientID and clientSecret.
 */
//# sourceMappingURL=openadr3ApiComponents.d.ts.map