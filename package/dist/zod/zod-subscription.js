import { z } from "zod";
export default z.object({ "id": z.string().regex(new RegExp("^[a-zA-Z0-9_-]*$")).min(1).max(128).describe("URL safe VTN assigned object ID.").optional(), "createdDateTime": z.string().datetime().describe("datetime in ISO 8601 format").optional(), "modificationDateTime": z.string().datetime().describe("datetime in ISO 8601 format").optional(), "objectType": z.literal("SUBSCRIPTION").describe("Used as discriminator.").optional(), "clientName": z.string().min(1).max(128).describe("User generated identifier, may be VEN identifier provisioned out-of-band."), "programID": z.string().regex(new RegExp("^[a-zA-Z0-9_-]*$")).min(1).max(128).describe("URL safe VTN assigned object ID."), "objectOperations": z.array(z.object({ "objects": z.array(z.enum(["PROGRAM", "EVENT", "REPORT", "SUBSCRIPTION", "VEN", "RESOURCE"]).describe("Types of objects addressable through API.")).describe("list of objects to subscribe to."), "operations": z.array(z.enum(["GET", "POST", "PUT", "DELETE"]).describe("object operation to subscribe to.")).describe("list of operations to subscribe to."), "callbackUrl": z.string().url().describe("User provided webhook URL."), "bearerToken": z.string().nullable().describe("User provided token.\nTo avoid custom integrations, callback endpoints\nshould accept the provided bearer token to authenticate VTN requests.\n").default(null) }).describe("object type, operations, and callbackUrl.")).describe("list of objects and operations to subscribe to."), "targets": z.array(z.object({ "type": z.string().min(1).max(128).describe("Enumerated or private string signifying the nature of values.\nE.G. \"PRICE\" indicates value is to be interpreted as a currency.\n"), "values": z.array(z.union([z.number(), z.number().int(), z.string(), z.boolean(), z.object({ "x": z.number().describe("A value on an x axis."), "y": z.number().describe("A value on a y axis.") }).describe("A pair of floats typically used as a point on a 2 dimensional grid.")])).describe("A list of data points. Most often a singular value such as a price.") }).describe("Represents one or more values associated with a type.\nE.g. a type of PRICE contains a single float value.\n")).nullable().describe("A list of valuesMap objects. Used by server to filter callbacks.").default(null) }).describe("An object created by a client to receive notification of operations on objects.\nClients may subscribe to be notified when a type of object is created,\nupdated, or deleted.\n");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9kLXN1YnNjcmlwdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy96b2Qvem9kLXN1YnNjcmlwdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBRXhCLGVBQWUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxzQkFBc0IsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLDZCQUE2QixDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQywyRUFBMkUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxrQ0FBa0MsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUMsT0FBTyxFQUFDLFFBQVEsRUFBQyxjQUFjLEVBQUMsS0FBSyxFQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLDJDQUEyQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsa0NBQWtDLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFDLE1BQU0sRUFBQyxLQUFLLEVBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxxQ0FBcUMsQ0FBQyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLDRCQUE0QixDQUFDLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsaUpBQWlKLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGlEQUFpRCxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMscUlBQXFJLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxxRUFBcUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxxRUFBcUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsOEdBQThHLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxrRUFBa0UsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLGlMQUFpTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuXG5leHBvcnQgZGVmYXVsdCB6Lm9iamVjdCh7IFwiaWRcIjogei5zdHJpbmcoKS5yZWdleChuZXcgUmVnRXhwKFwiXlthLXpBLVowLTlfLV0qJFwiKSkubWluKDEpLm1heCgxMjgpLmRlc2NyaWJlKFwiVVJMIHNhZmUgVlROIGFzc2lnbmVkIG9iamVjdCBJRC5cIikub3B0aW9uYWwoKSwgXCJjcmVhdGVkRGF0ZVRpbWVcIjogei5zdHJpbmcoKS5kYXRldGltZSgpLmRlc2NyaWJlKFwiZGF0ZXRpbWUgaW4gSVNPIDg2MDEgZm9ybWF0XCIpLm9wdGlvbmFsKCksIFwibW9kaWZpY2F0aW9uRGF0ZVRpbWVcIjogei5zdHJpbmcoKS5kYXRldGltZSgpLmRlc2NyaWJlKFwiZGF0ZXRpbWUgaW4gSVNPIDg2MDEgZm9ybWF0XCIpLm9wdGlvbmFsKCksIFwib2JqZWN0VHlwZVwiOiB6LmxpdGVyYWwoXCJTVUJTQ1JJUFRJT05cIikuZGVzY3JpYmUoXCJVc2VkIGFzIGRpc2NyaW1pbmF0b3IuXCIpLm9wdGlvbmFsKCksIFwiY2xpZW50TmFtZVwiOiB6LnN0cmluZygpLm1pbigxKS5tYXgoMTI4KS5kZXNjcmliZShcIlVzZXIgZ2VuZXJhdGVkIGlkZW50aWZpZXIsIG1heSBiZSBWRU4gaWRlbnRpZmllciBwcm92aXNpb25lZCBvdXQtb2YtYmFuZC5cIiksIFwicHJvZ3JhbUlEXCI6IHouc3RyaW5nKCkucmVnZXgobmV3IFJlZ0V4cChcIl5bYS16QS1aMC05Xy1dKiRcIikpLm1pbigxKS5tYXgoMTI4KS5kZXNjcmliZShcIlVSTCBzYWZlIFZUTiBhc3NpZ25lZCBvYmplY3QgSUQuXCIpLCBcIm9iamVjdE9wZXJhdGlvbnNcIjogei5hcnJheSh6Lm9iamVjdCh7IFwib2JqZWN0c1wiOiB6LmFycmF5KHouZW51bShbXCJQUk9HUkFNXCIsXCJFVkVOVFwiLFwiUkVQT1JUXCIsXCJTVUJTQ1JJUFRJT05cIixcIlZFTlwiLFwiUkVTT1VSQ0VcIl0pLmRlc2NyaWJlKFwiVHlwZXMgb2Ygb2JqZWN0cyBhZGRyZXNzYWJsZSB0aHJvdWdoIEFQSS5cIikpLmRlc2NyaWJlKFwibGlzdCBvZiBvYmplY3RzIHRvIHN1YnNjcmliZSB0by5cIiksIFwib3BlcmF0aW9uc1wiOiB6LmFycmF5KHouZW51bShbXCJHRVRcIixcIlBPU1RcIixcIlBVVFwiLFwiREVMRVRFXCJdKS5kZXNjcmliZShcIm9iamVjdCBvcGVyYXRpb24gdG8gc3Vic2NyaWJlIHRvLlwiKSkuZGVzY3JpYmUoXCJsaXN0IG9mIG9wZXJhdGlvbnMgdG8gc3Vic2NyaWJlIHRvLlwiKSwgXCJjYWxsYmFja1VybFwiOiB6LnN0cmluZygpLnVybCgpLmRlc2NyaWJlKFwiVXNlciBwcm92aWRlZCB3ZWJob29rIFVSTC5cIiksIFwiYmVhcmVyVG9rZW5cIjogei5zdHJpbmcoKS5udWxsYWJsZSgpLmRlc2NyaWJlKFwiVXNlciBwcm92aWRlZCB0b2tlbi5cXG5UbyBhdm9pZCBjdXN0b20gaW50ZWdyYXRpb25zLCBjYWxsYmFjayBlbmRwb2ludHNcXG5zaG91bGQgYWNjZXB0IHRoZSBwcm92aWRlZCBiZWFyZXIgdG9rZW4gdG8gYXV0aGVudGljYXRlIFZUTiByZXF1ZXN0cy5cXG5cIikuZGVmYXVsdChudWxsKSB9KS5kZXNjcmliZShcIm9iamVjdCB0eXBlLCBvcGVyYXRpb25zLCBhbmQgY2FsbGJhY2tVcmwuXCIpKS5kZXNjcmliZShcImxpc3Qgb2Ygb2JqZWN0cyBhbmQgb3BlcmF0aW9ucyB0byBzdWJzY3JpYmUgdG8uXCIpLCBcInRhcmdldHNcIjogei5hcnJheSh6Lm9iamVjdCh7IFwidHlwZVwiOiB6LnN0cmluZygpLm1pbigxKS5tYXgoMTI4KS5kZXNjcmliZShcIkVudW1lcmF0ZWQgb3IgcHJpdmF0ZSBzdHJpbmcgc2lnbmlmeWluZyB0aGUgbmF0dXJlIG9mIHZhbHVlcy5cXG5FLkcuIFxcXCJQUklDRVxcXCIgaW5kaWNhdGVzIHZhbHVlIGlzIHRvIGJlIGludGVycHJldGVkIGFzIGEgY3VycmVuY3kuXFxuXCIpLCBcInZhbHVlc1wiOiB6LmFycmF5KHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCkuaW50KCksIHouc3RyaW5nKCksIHouYm9vbGVhbigpLCB6Lm9iamVjdCh7IFwieFwiOiB6Lm51bWJlcigpLmRlc2NyaWJlKFwiQSB2YWx1ZSBvbiBhbiB4IGF4aXMuXCIpLCBcInlcIjogei5udW1iZXIoKS5kZXNjcmliZShcIkEgdmFsdWUgb24gYSB5IGF4aXMuXCIpIH0pLmRlc2NyaWJlKFwiQSBwYWlyIG9mIGZsb2F0cyB0eXBpY2FsbHkgdXNlZCBhcyBhIHBvaW50IG9uIGEgMiBkaW1lbnNpb25hbCBncmlkLlwiKV0pKS5kZXNjcmliZShcIkEgbGlzdCBvZiBkYXRhIHBvaW50cy4gTW9zdCBvZnRlbiBhIHNpbmd1bGFyIHZhbHVlIHN1Y2ggYXMgYSBwcmljZS5cIikgfSkuZGVzY3JpYmUoXCJSZXByZXNlbnRzIG9uZSBvciBtb3JlIHZhbHVlcyBhc3NvY2lhdGVkIHdpdGggYSB0eXBlLlxcbkUuZy4gYSB0eXBlIG9mIFBSSUNFIGNvbnRhaW5zIGEgc2luZ2xlIGZsb2F0IHZhbHVlLlxcblwiKSkubnVsbGFibGUoKS5kZXNjcmliZShcIkEgbGlzdCBvZiB2YWx1ZXNNYXAgb2JqZWN0cy4gVXNlZCBieSBzZXJ2ZXIgdG8gZmlsdGVyIGNhbGxiYWNrcy5cIikuZGVmYXVsdChudWxsKSB9KS5kZXNjcmliZShcIkFuIG9iamVjdCBjcmVhdGVkIGJ5IGEgY2xpZW50IHRvIHJlY2VpdmUgbm90aWZpY2F0aW9uIG9mIG9wZXJhdGlvbnMgb24gb2JqZWN0cy5cXG5DbGllbnRzIG1heSBzdWJzY3JpYmUgdG8gYmUgbm90aWZpZWQgd2hlbiBhIHR5cGUgb2Ygb2JqZWN0IGlzIGNyZWF0ZWQsXFxudXBkYXRlZCwgb3IgZGVsZXRlZC5cXG5cIik7XG4iXX0=